[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "footprintR book",
    "section": "",
    "text": "Preface\nThis is a Quarto book about footprintR.\n\nThis book is free and licensed under CC BY-SA 4.0\n\nCopyright (c) 2025 Friedrich Miescher Institute for Biomedical Research.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Single-molecule footprinting is a technique used to study protein-DNA interactions, chromatin accessibility, and nucleosome positioning at the level of individual DNA molecules. Unlike bulk footprinting methods, which provide an averaged signal across a population of molecules, single-molecule footprinting captures heterogeneity in DNA-protein interactions and chromatin accessibility.\nThis book covers various tasks for the analysis of single-molecule footprinting data using footprintR:\nChapter 2 describes how to read footprinting data from modBam files and other formats into R. It also introduces how the data is represented in memory.\nChapter 3 shows how to create informative summaries to judge the quality of an experimental dataset, and how low-quality reads can be filtered out from loaded data or from modBam files.\nChapter 4 illustrates the use of plotRegion to visualize read- or summary-level information for a single genomic region, optionally with additional data and annotation tracks.\nChapter 5 describes various nucleosome-related analyses, such as how to measure the average distance between nucleosomes, how to place nucleosomes onto individual reads, or how to quantify nucleosome phasing in a regions.\nChapter 6 introduces scanForHighScoringRegions, a modular framework that can be used to scan (parts of) the genome for regions of interest, for example differentially modified regions or regions containing phased nucleosomes. If you are looking for a “peak finder” for footprinting data, this is the chapter to read.\nChapter 7 describes how to group reads, for example by allele or methylation status using regroupReads, or across multiple genomic regions using getAnchorRegions. The latter is useful to create meta-plots of your data, for example around transcript start sites or transcription factor binding sites.\nChapter 8 illustrates the power of combining multiple data modalities (for example genetic variability, accessibility, endogenous CpG methylation and ChIP data) into an integrated analysis: The allele-specific binding of a transcription factor.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "reading-data.html",
    "href": "reading-data.html",
    "title": "2  Reading data from files",
    "section": "",
    "text": "2.1 Read-level versus summary-level\nThis chapter describes how to read footprinting data from modBam files and other formats into R. It also introduces how the data is represented in memory. footprintR provides three functions for reading data into R from specific file types: readModBam, readBedMethyl and readModkitExtract. If you want to jump right in, have a look at the documentation of the reader function corresponding to the type of your data.\nWe start by loading the required packages and a BSgenome object providing the mouse genome sequence.\nTypically, single molecule footprinting data at the single read level is stored in modBam files, which are standard bam files (Li et al. (2009)) that in addition to the usual information on alignments also contain base modifications encoded in the ML and MM tags (see section 1.7 of SAMtags.pdf for details).\nreadModBam reads modBam files and can either keep the data at the level of individual reads or summarize them per genomic position and sample. This is controlled via the level argument to readModBam. By default, read-level data is imported. In fact, footprintR provides two modes for importing read-level data: level = \"quickread\" is often the fastest, but does not return the full set of read-level annotations, and is not compatible with read sampling. level = \"read\" on the other hand provides a more complete output, but is a bit slower. If level is not specified, footprintR will select the best mode based on the other arguments provided to readModBam (specifically, whether variant names or read sampling are requested). As illustrated in Section 2.4 below, summary data (aggregated across reads) can also be imported by setting level = \"summary\".",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#sec-data-representation",
    "href": "reading-data.html#sec-data-representation",
    "title": "2  Reading data from files",
    "section": "2.2 Data representation",
    "text": "2.2 Data representation\nLet’s start by reading individual reads from a modBam file for a small region of the genome:\n\n\nShow/hide code\nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286000-39286200\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm,\n    trim = TRUE\n)\nse\n\n\nclass: RangedSummarizedExperiment \ndim: 201 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(201): chr8:39286000:- chr8:39286001:- ... chr8:39286198:+\n  chr8:39286199:+\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\n\n\nHere is a scheme that illustrates the internals of se containing read-level data:\n\n\n\n\n\n\nFigure 2.1\n\n\n\nLet’s go through the individual parts. You can see that the data is contained in a RangedSummarizedExperiment object. This is a container that contains one or more assays (here only one assay called mod_prob). Each assay is a matrix-like object and contains the loaded data (here: base modification probabilities of individual reads).\n\n\nShow/hide code\nassayNames(se)\n\n\n[1] \"mod_prob\"\n\n\nThe rows represent genomic positions and the columns represent samples. In our example, we have loaded data from two modBam files corresponding to the two samples \"wt1\" and \"wt2\", thus the object has two columns:\n\n\nShow/hide code\nncol(se)\n\n\n[1] 2\n\n\nShow/hide code\ncolnames(se)\n\n\n[1] \"wt1\" \"wt2\"\n\n\nThe 201 rows correspond to individual base positions, for which at least one modification has been loaded. You can get the genomic coordinates of these positions using rowRanges:\n\n\nShow/hide code\nnrow(se)\n\n\n[1] 201\n\n\nShow/hide code\nrowRanges(se)\n\n\nUnstitchedGPos object with 201 positions and 1 metadata column:\n                  seqnames       pos strand | sequenceContext\n                     &lt;Rle&gt; &lt;integer&gt;  &lt;Rle&gt; |  &lt;DNAStringSet&gt;\n  chr8:39286000:-     chr8  39286000      - |               G\n  chr8:39286001:-     chr8  39286001      - |               A\n  chr8:39286002:+     chr8  39286002      + |               A\n  chr8:39286003:-     chr8  39286003      - |               A\n  chr8:39286004:+     chr8  39286004      + |               A\n              ...      ...       ...    ... .             ...\n  chr8:39286195:+     chr8  39286195      + |               A\n  chr8:39286196:+     chr8  39286196      + |               A\n  chr8:39286197:-     chr8  39286197      - |               A\n  chr8:39286198:+     chr8  39286198      + |               A\n  chr8:39286199:+     chr8  39286199      + |               A\n  -------\n  seqinfo: 61 sequences (1 circular) from mm39 genome\n\n\nThese positions are stranded, as base modifications can be observed on either of the two strands:\n\n\nShow/hide code\ntable(strand(se))\n\n\n\n  +   -   * \n100 101   0 \n\n\nFinally, the individual reads of a sample are stored in the assay, inside the “column” of that sample:\n\n\nShow/hide code\nassayNames(se)\n\n\n[1] \"mod_prob\"\n\n\nShow/hide code\nassay(se, \"mod_prob\")\n\n\nDataFrame with 201 rows and 2 columns\n                         wt1          wt2\n                  &lt;NaMatrix&gt;   &lt;NaMatrix&gt;\nchr8:39286000:- NA:NA:NA:... NA:NA:NA:...\nchr8:39286001:-  0:NA:NA:...   0:NA:0:...\nchr8:39286002:+   NA:0:0:...  NA:0:NA:...\nchr8:39286003:-  0:NA:NA:...   0:NA:0:...\nchr8:39286004:+   NA:0:0:...  NA:0:NA:...\n...                      ...          ...\nchr8:39286195:+  NA:0:NA:...  NA:0:NA:...\nchr8:39286196:+  NA:0:NA:...  NA:0:NA:...\nchr8:39286197:-  0:NA:NA:...   0:NA:0:...\nchr8:39286198:+  NA:0:NA:... NA:NA:NA:...\nchr8:39286199:+  NA:0:NA:... NA:NA:NA:...\n\n\nYou can see that each column is itself an object of type NaMatrix.\n\n\nShow/hide code\n# get the NaMatrix with reads of sample wt1\nmp1 &lt;- assay(se, \"mod_prob\")$wt1\nmp1\n\n\n&lt;201 x 35 NaMatrix&gt; of type \"double\" [nnacount=2368 (34%)]:\n       wt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6 ...\n  [1,]                                       NA   .\n  [2,]                                        0   .\n  [3,]                                       NA   .\n  [4,]                                        0   .\n  [5,]                                       NA   .\n   ...                                        .   .\n[197,]                                       NA   .\n[198,]                                       NA   .\n[199,]                                        0   .\n[200,]                                       NA   .\n[201,]                                       NA   .\n       wt1-70e9a128-ea64-4c1d-b9e9-44f76a51a780\n  [1,]                                       NA\n  [2,]                                       NA\n  [3,]                                       NA\n  [4,]                                       NA\n  [5,]                                       NA\n   ...                                        .\n[197,]                                        0\n[198,]                                        0\n[199,]                                       NA\n[200,]                                        0\n[201,]                                        0\n\n\nThe rows in the NaMatrix corresponding to the same genomic positions we have seen above, but the columns correspond to the 35 individual reads. The numeric values correspond to modification probabilities. A value greater than 0.5 or 0.7 is typically considered modified. Many values are NA (missing), either because a read did not overlap a given position, or there was no information about modifications at that position in that read. Storing all these NA values would be a waste of memory, which is avoided in the NaMatrix, which is a special type of sparse matrix from the SparseArray package that only stores non-NA values.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#flattening-read-level-to-summary-level-data",
    "href": "reading-data.html#flattening-read-level-to-summary-level-data",
    "title": "2  Reading data from files",
    "section": "2.3 Flattening read-level to summary-level data",
    "text": "2.3 Flattening read-level to summary-level data\nWe can use flattenReadLevelAssay to go from this read-level to summary-level data:\n\n\nShow/hide code\nse_summary &lt;- flattenReadLevelAssay(se)\n\n\nHere is an illustration of the summary-level data container:\n\n\n\n\n\n\nFigure 2.2\n\n\n\nIts dimensions are identical to the original se (positions by samples), however it contains additional assays that do not have the nested structure with individual reads, but are simple matrices:\n\n\nShow/hide code\ndim(se_summary)\n\n\n[1] 201   2\n\n\nShow/hide code\nassayNames(se_summary)\n\n\n[1] \"mod_prob\" \"Nmod\"     \"Nvalid\"   \"FracMod\" \n\n\nShow/hide code\nhead(assay(se_summary, \"Nmod\"))\n\n\n                wt1 wt2\nchr8:39286000:-   0   0\nchr8:39286001:-   0   1\nchr8:39286002:+   0   1\nchr8:39286003:-   1   3\nchr8:39286004:+   0   0\nchr8:39286005:-   0   2\n\n\nBy default, flattenReadLevelAssay keeps the read-level assay (\"mod_prob\") and generates summarized assays with the numbers of modified and total bases (\"Nmod\" and \"Nvalid\"), and the fraction of modified bases per position and sample (“FracMod”`).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#sec-summary-data",
    "href": "reading-data.html#sec-summary-data",
    "title": "2  Reading data from files",
    "section": "2.4 Directly reading summary-level data",
    "text": "2.4 Directly reading summary-level data\nIf the individual reads are not required, you can directly summarize them while reading, which is faster and eliminates the call to flattenReadLevelAssay. This is achieved by adding the argument level = \"summary\" to the readModBam call:\n\n\nShow/hide code\nse_summary_direct &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286000-39286200\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm,\n    trim = TRUE,\n    level = \"summary\"\n)\nse_summary_direct\n\n\nclass: RangedSummarizedExperiment \ndim: 201 2 \nmetadata(1): readLevelData\nassays(3): Nmod Nvalid FracMod\nrownames(201): chr8:39286000:- chr8:39286001:- ... chr8:39286198:+\n  chr8:39286199:+\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(2): sample modbase\n\n\nShow/hide code\nidentical(assay(se_summary, \"FracMod\"),\n          assay(se_summary_direct, \"FracMod\"))\n\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#sec-read-sampling",
    "href": "reading-data.html#sec-read-sampling",
    "title": "2  Reading data from files",
    "section": "2.5 Read sampling",
    "text": "2.5 Read sampling\nIn some cases, we may want to read a random set of reads from a modBam file, for example to calculate average modification rates or quality statistics. In such cases, reading data by genomic position is not optimal.\nreadModBam provides a special reading mode for this, controlled by the arguments nAlnsToSample and seqnamesToSampleFrom:\n\n\nShow/hide code\nse_sampled &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm,\n    nAlnsToSample = 20,\n    seqnamesToSampleFrom = \"chr19\"\n)\nse_sampled\n\n\nclass: RangedSummarizedExperiment \ndim: 61348 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(61348): chr19:6119863:- chr19:6119864:- ... chr19:60772501:+\n  chr19:60772504:+\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\n\n\nShow/hide code\nse_sampled$n_reads\n\n\n[1] 19 18\n\n\nFor details of how to make the sampling reproducible even when using multiple parallel threads, and why you might get a lower number of sampled reads than requested, please look at the documenation of readModBam.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#improving-reading-performance",
    "href": "reading-data.html#improving-reading-performance",
    "title": "2  Reading data from files",
    "section": "2.6 Improving reading performance",
    "text": "2.6 Improving reading performance\nEven though readModBam is implemented using C/C++ for speed and efficiency, reading the data may become slow. Here are a few points that may help to reduce the time to read modification data from modBam files:\n\nRead summary-level data: Reading of summary-level data (argument level = \"summary\") is much faster than reading of read-level data, so use it whenever you do not need to represent indidvual reads.\nParallelization: readModBam supports parallel processing, controlled by the BPPARAM argument. If multiple workers are available in the BPPARAM object (see BiocParallel), they will be used to read data from from multiple modBam files in parallel. If the number of workers is larger than the number of bamfiles, the workers will further be used to speed-up decompression of bam records.\nRegion size: If you are reading read-level data from large or many regions, certain operations like sub-setting of positions may become slow. It may overall be faster to call readModBam multiple times on fewer or smaller regions, and keeping track of the partial results, than calling readModBam a single time on all regions.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#reading-from-other-file-types",
    "href": "reading-data.html#reading-from-other-file-types",
    "title": "2  Reading data from files",
    "section": "2.7 Reading from other file types",
    "text": "2.7 Reading from other file types\nIn addition to reading from modBam files, you can also read (summary-level) data from bedMethyl files using readBedMethyl, or from tabular files created by modkit using readModkitExtract. The arguments of these reader functions are largely similar to the ones used for reading modBam files.\n\n\nShow/hide code\n# read from bedMethyl\nbmfile &lt;- system.file(\"extdata\", \"modkit_pileup_1.bed.gz\",\n                      package = \"footprintR\")\nse_bedmethyl &lt;- readBedMethyl(\n    fnames = bmfile,\n    modbase = \"m\",\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 3, \n    sequenceReference = gnm\n)\nse_bedmethyl\n\n\nclass: RangedSummarizedExperiment \ndim: 10000 1 \nmetadata(1): readLevelData\nassays(2): Nmod Nvalid\nrownames: NULL\nrowData names(1): sequenceContext\ncolnames(1): s1\ncolData names(2): sample modbase\n\n\nShow/hide code\n# read from a tabular file created by modkit\nextrfile &lt;- system.file(\"extdata\", \"modkit_extract_rc_5mC_1.tsv.gz\",\n                        package = \"footprintR\")\nse_modkit &lt;- readModkitExtract(\n    fnames = extrfile,\n    modbase = \"m\",\n    filter = NULL,\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 3, \n    sequenceReference = gnm\n)\nse_modkit\n\n\nclass: RangedSummarizedExperiment \ndim: 6432 1 \nmetadata(3): modkit_threshold filter_threshold readLevelData\nassays(1): mod_prob\nrownames(6432): chr1:6928983:- chr1:6928995:- ... chr1:6949455:+\n  chr1:6949461:+\nrowData names(1): sequenceContext\ncolnames(1): s1\ncolData names(2): sample modbase",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#session-info",
    "href": "reading-data.html#session-info",
    "title": "2  Reading data from files",
    "section": "2.8 Session info",
    "text": "2.8 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                        * 1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                 * 1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n dplyr                                          1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                              1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                        3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                       * 1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                               * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                  * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n patchwork                                      1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n R.methodsS3                                    1.8.2     2022-06-13 [1] CRAN (R 4.5.0)\n R.oo                                           1.27.1    2025-05-02 [1] CRAN (R 4.5.0)\n R.utils                                        2.13.0    2025-02-24 [1] CRAN (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n Rsamtools                                      2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                     * 1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SparseArray                                  * 1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n SummarizedExperiment                         * 1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                          1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\nLi, Heng, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils Homer, Gabor Marth, Goncalo Abecasis, Richard Durbin, and 1000 Genome Project Data Processing Subgroup. 2009. “The Sequence Alignment/Map Format and SAMtools.” Bioinformatics 25 (16): 2078–79.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html",
    "href": "qc-filtering.html",
    "title": "3  Quality control and filtering",
    "section": "",
    "text": "3.1 Position filtering\nThis chapter explains how to use footprintR to filter single molecule footprinting data. The package contains functionality to calculate a collection of quality statistics for each read, and use these to filter out low-quality reads. This filtering can be done either on the imported SummarizedExperiment object, or directly on the modBam file (which would generate another, filtered modBam file). footprintR also provides several ways to filter out individual genomic positions based on, e.g. the genomic sequence or the read coverage.\nWe start by loading the required packages. In addition to the software package, we load a BSgenome object providing the mouse genome sequence.\nTo illustrate the position-level filtering of imported data, we first read 6mA data from a small genomic region for two samples. We add the sequence context (a single nucleotide) to be able to use this information as a basis for filtering.\nShow/hide code\nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286301-39287100\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\nse\n\n\nclass: RangedSummarizedExperiment \ndim: 21456 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(21456): chr8:39269571:- chr8:39269579:- ... chr8:39303298:-\n  chr8:39303300:-\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\nThe sequence information is stored in the rowData of se:\nShow/hide code\nrowData(se)\n\n\nDataFrame with 21456 rows and 1 column\n                sequenceContext\n                 &lt;DNAStringSet&gt;\nchr8:39269571:-               A\nchr8:39269579:-               A\nchr8:39269588:-               A\nchr8:39269589:-               A\nchr8:39269612:-               A\n...                         ...\nchr8:39303283:-               A\nchr8:39303284:-               A\nchr8:39303297:-               A\nchr8:39303298:-               C\nchr8:39303300:-               A\nPosition filtering can now be performed with the filterPositions function. The filters argument define which filters to apply, as well as the order (sequence context, coverage, removal of positions without non-NA values). Here, we retain only positions where the genome sequence is an A, and the coverage (the number of overlapping reads) is at least five. The assayNameCov argument indicates which assay will be used to define the coverage. If this is a read-level assay (like here), coverage will first be calculated using flattenReadLevelAssay. For more precise control, the summary assay can also be manually calculated and added to se beforehand, and specified in assayNameCov.\nShow/hide code\nsefilt &lt;- filterPositions(\n    se, \n    filters = c(\"sequenceContext\", \"coverage\", \"all.na\"),\n    sequenceContext = \"A\",\n    assayNameCov = \"mod_prob\",\n    minCov = 5\n)\nsefilt\n\n\nclass: RangedSummarizedExperiment \ndim: 10957 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(10957): chr8:39279307:- chr8:39279308:- ... chr8:39298917:-\n  chr8:39298921:-\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\nIn this case, the position filtering reduced the number of unique positions from 21456 to 10957 by 48.9%. However, the number of non-NA values in the matrix is only reduced from 165914 to 148815 (10.3%), confirming that the filtered-out positions are generally covered only by few reads.\nIn addition to explicit filtering like here, many other functions in footprintR allow built-in filtering for a specific sequence context.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html#read-filtering",
    "href": "qc-filtering.html#read-filtering",
    "title": "3  Quality control and filtering",
    "section": "3.2 Read filtering",
    "text": "3.2 Read filtering\n\n3.2.1 Filtering a SummarizedExperiment object\nIn addition to the position filtering illustrated above, footprintR also provides functionality for calculating read-level quality scores and filtering out reads with low quality. The calculation of the quality scores is done using the addReadStats function, and the filtering is performed via the filterReads function.\n\n\nShow/hide code\n# Calculate read statistics\nsefilt &lt;- addReadStats(\n    sefilt, \n    name = \"QC\"\n)\n\n# The calculated read statistics are stored in the colData\ncolData(sefilt)\n\n\nDataFrame with 2 rows and 5 columns\n         sample     modbase   n_reads\n    &lt;character&gt; &lt;character&gt; &lt;integer&gt;\nwt1         wt1           a        34\nwt2         wt2           a        41\n                                                                       readInfo\n                                                                         &lt;List&gt;\nwt1   20.3297:17986:17872:...,19.7905:10469:10421:...,13.2784:7876:7761:...,...\nwt2 14.1235:22453:22149:...,15.9814:15617:15460:...,14.3505:12359:12212:...,...\n                                                                                                        QC\n                                                                                                    &lt;List&gt;\nwt1 0.0618421:0.0455829:0.967676:...,0.0545563:0.0386562:0.971495:...,0.1317097:0.1049275:0.931608:...,...\nwt2       0.195971:0.186199:0.931852:...,0.169650:0.156304:0.944134:...,0.189312:0.176095:0.940588:...,...\n\n\nShow/hide code\nsefilt$QC$wt1\n\n\nDataFrame with 34 rows and 11 columns\n                                         MeanModProb   FracMod  MeanConf\n                                           &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6   0.0618421 0.0455829  0.967676\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47   0.0545563 0.0386562  0.971495\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897   0.1317097 0.1049275  0.931608\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364   0.1315284 0.1202325  0.953554\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f   0.1023139 0.0596330  0.923058\n...                                              ...       ...       ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7   0.0596196 0.0461133  0.970019\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619   0.0958030 0.0778281  0.954483\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641   0.1107278 0.0993151  0.966969\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379   0.0394939 0.0268914  0.978357\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b   0.1471507 0.1341176  0.960524\n                                         MeanConfUnm MeanConfMod FracLowConf\n                                           &lt;numeric&gt;   &lt;numeric&gt;   &lt;numeric&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6    0.974548    0.823787   0.0367084\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47    0.976905    0.836961   0.0299126\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897    0.946834    0.801720   0.0765217\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364    0.967183    0.853822   0.0584817\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f    0.936395    0.712730   0.0880734\n...                                              ...         ...         ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7    0.977205    0.821373   0.0342556\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619    0.965575    0.823061   0.0565611\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641    0.975328    0.891164   0.0376712\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379    0.982404    0.831901   0.0190032\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b    0.969679    0.901419   0.0376471\n                                         IQRModProb sdModProb Lag1DModProb\n                                          &lt;numeric&gt; &lt;numeric&gt;    &lt;numeric&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6  0.0000000  0.185359    0.0573043\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47  0.0000000  0.173306    0.0598527\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897  0.1113281  0.254609    0.1531323\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364  0.0683594  0.284379    0.1417151\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f  0.1152344  0.188172    0.1021719\n...                                             ...       ...          ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7  0.0000000  0.184892    0.0676626\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619  0.0488281  0.232541    0.1095518\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641  0.0000000  0.272549    0.1233933\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379  0.0000000  0.146425    0.0401722\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b  0.0761719  0.310255    0.1415094\n                                                                       ACModProb\n                                                                          &lt;list&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6       0.0749726,0.0161444,0.0133524,...\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47  0.02945337,-0.00588547,-0.01550006,...\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897     0.0319851,-0.0100365, 0.0148677,...\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364  0.02581876, 0.03198559,-0.00294165,...\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f       0.0068839,0.0300003,0.0344642,...\n...                                                                          ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7  0.01516679, 0.00209322,-0.00613638,...\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619       0.0832970,0.0437754,0.0433326,...\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641    -0.0505126,-0.0494200,-0.0163033,...\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379 -0.00921144, 0.01132777, 0.00043232,...\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b    -0.0303490,-0.0681595,-0.0348878,...\n                                                                         PACModProb\n                                                                             &lt;list&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6    -0.05628108,-0.00550086, 0.00561907,...\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47       -0.0248721,-0.0272212,-0.0196893,...\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897       -0.0318656, 0.0126163, 0.0145030,...\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364  0.000585163,-0.035027495,-0.036536268,...\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f          0.0257367,0.0221382,0.0161219,...\n...                                                                             ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7       -0.0148931,-0.0104126,-0.0223420,...\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619 -0.023189216, 0.000722367,-0.018193456,...\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641       -0.0239780, 0.0296459,-0.0448544,...\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379        0.0176851,-0.0107225, 0.0719348,...\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b       -0.0609389, 0.0117622,-0.0752276,...\n\n\nShow/hide code\n# In addition, we can filter based on the read info columns added by readModBam\nsefilt$readInfo$wt1\n\n\nDataFrame with 34 rows and 5 columns\n                                            qscore read_length aligned_length\n                                         &lt;numeric&gt;   &lt;integer&gt;      &lt;integer&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6   20.3297       17986          17872\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47   19.7905       10469          10421\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897   13.2784        7876           7761\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364   16.2577        9694           9585\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f   11.2134       14639          14236\n...                                            ...         ...            ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7   17.4973       11977           5871\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619   15.7355        9155           5711\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641   18.1292        9097           6047\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379   22.4457        7597           7577\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b   16.8056        4182           2419\n                                         variant_label aligned_fraction\n                                           &lt;character&gt;        &lt;numeric&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6            NA         0.993662\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47            NA         0.995415\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897            NA         0.985399\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364            NA         0.988756\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f            NA         0.972471\n...                                                ...              ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7            NA         0.490190\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619            NA         0.623812\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641            NA         0.664725\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379            NA         0.997367\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b            NA         0.578431\n\n\nShow/hide code\n# Visualize the read statistics to set appropriate filter thresholds\nplotReadStats(\n    sefilt\n)\n\n# Perform filtering\nsefilt &lt;- filterReads(\n    sefilt,\n    minQscore = 13,\n    maxFracLowConf = 0.1,\n    minAlignedLength = 5000, \n    removeAllNApos = TRUE\n)\n\n\n\n\n\n\n\n\nFigure 3.1\n\n\n\n\n\nFiltering statistics are stored in the metadata of the filtered SummarizedExperiment object.\n\n\nShow/hide code\nmetadata(sefilt)$filteredOutReads\n\n\n$wt1\n&lt;9 x 8 SparseMatrix&gt; of type \"logical\" [nzcount=10 (14%)]:\n                                          Qscore Entropy ...   AllNA\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f    TRUE   FALSE   .   FALSE\nwt1-1c916f3a-030c-4c18-9f76-408840e6a3fa    TRUE   FALSE   .   FALSE\nwt1-2f9885e3-91d5-4753-961d-439d64fbd301    TRUE   FALSE   .   FALSE\nwt1-840df614-693f-40f5-9b35-7495eac426f1   FALSE   FALSE   .   FALSE\nwt1-51e19b4b-6baa-4982-88f3-a16a9fad78c6   FALSE   FALSE   .   FALSE\nwt1-419d45a8-6e9e-41cc-ae32-9105049b8cd7    TRUE   FALSE   .   FALSE\nwt1-c1eef755-3d3f-4f33-b87a-d896ec1a26cc   FALSE   FALSE   .   FALSE\nwt1-d87a7efd-367f-42f6-b9af-e112610e945b    TRUE   FALSE   .   FALSE\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b   FALSE   FALSE   .   FALSE\n\n$wt2\n&lt;12 x 8 SparseMatrix&gt; of type \"logical\" [nzcount=16 (17%)]:\n                                          Qscore Entropy ...   AllNA\nwt2-b58992e1-d311-49d7-bf22-81fd390687b5    TRUE   FALSE   .   FALSE\nwt2-e145db43-4658-4dcc-8f58-78fb09544770    TRUE   FALSE   .   FALSE\nwt2-eac97b86-e3fc-4d19-8a02-08bd861077b5    TRUE   FALSE   .   FALSE\nwt2-e06432c5-189d-4c1c-8a5b-025c2d68fee5    TRUE   FALSE   .   FALSE\nwt2-5a2f30be-48c9-4b0a-8ab1-83d54c71ef56   FALSE   FALSE   .   FALSE\n                                     ...       .       .   .       .\nwt2-fac12814-a86d-4d07-9596-d9ea4943580e   FALSE   FALSE   .   FALSE\nwt2-f77f5ae9-dd3a-4e08-a390-7e80868433a7    TRUE   FALSE   .   FALSE\nwt2-fda332ae-02de-4391-9cff-620c1ae8799f   FALSE   FALSE   .   FALSE\nwt2-b6efe1fe-f2b9-4f69-bb61-f4a741969a52   FALSE   FALSE   .   FALSE\nwt2-d0b3f6f8-c5d3-477e-b4c4-02dcd4602767   FALSE   FALSE   .   FALSE\n\n\n\n\n3.2.2 Filtering a modBam file\nAs mentioned above, footprintR can also be used to directly filter alignments in a modBam file. The filterReadsBam function reads the alignments in the input file, parses them, and writes them to the output file if they pass all the designated filters. These filters are treated hierarchically - in other words, if a read does not pass a given filter, the remaining filters will not be examined and the processing continues with the next read. Here we illustrate the modBam filtering using two small example modBam files, each with 10 reads.\n\n\nShow/hide code\n# input files\nmodbamfiles &lt;- c(\"data/6mA_1_10reads.bam\", \"data/6mA_2_10reads.bam\")\n\n# output files\nfiltbamfiles &lt;- sub(\"\\\\.bam\", \"_filtered.bam\", modbamfiles)\n\nres &lt;- filterReadsBam(infiles = modbamfiles, outfiles = filtbamfiles,\n                      modbase = \"a\", indexOutfiles = FALSE, minReadLength = 6746,\n                      minAlignedLength = 6896, minAlignedFraction = 0.56,\n                      minQscore = 9.7, maxFracLowConf = 0.11, maxEntropy = 0.29,\n                      BPPARAM = BiocParallel::SerialParam(), verbose = TRUE)\n\n\nℹ start filtering of 'data/6mA_1_10reads.bam' using 1 thread\n\n\nℹ merging 1 filtered chunks\n\n\nℹ done filtering: retained 7 of 10 records (70%)\n\n\nℹ start filtering of 'data/6mA_2_10reads.bam' using 1 thread\n\n\nℹ merging 1 filtered chunks\n\n\nℹ done filtering: retained 7 of 10 records (70%)\n\n\nThe res object provides details about the number of reads that were filtered out at each stage.\n\n\nShow/hide code\nres\n\n\n  sample                 infile                         outfile total retained\n1     s1 data/6mA_1_10reads.bam data/6mA_1_10reads_filtered.bam    10        7\n2     s2 data/6mA_2_10reads.bam data/6mA_2_10reads_filtered.bam    10        7\n  filtered_unmapped filtered_secondary filtered_supplementary\n1                 0                  0                      0\n2                 0                  0                      0\n  filtered_minReadLength filtered_minAlignedLength filtered_minAlignedFraction\n1                      0                         1                           1\n2                      1                         0                           0\n  filtered_minQscore filtered_maxFracLowConf filtered_maxEntropy\n1                  0                       0                   1\n2                  1                       1                   0",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html#session-info",
    "href": "qc-filtering.html#session-info",
    "title": "3  Quality control and filtering",
    "section": "3.3 Session info",
    "text": "3.3 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                        * 1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                   1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n dplyr                                          1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                              1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                        3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n labeling                                       0.4.3     2023-08-29 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                       * 1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                               * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                  * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n patchwork                                      1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n Rsamtools                                      2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                     * 1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SparseArray                                  * 1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n SummarizedExperiment                         * 1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                          1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html",
    "href": "visualize-regions.html",
    "title": "4  Visualizing regions with plotRegion",
    "section": "",
    "text": "4.1 Preparation\nThe plotRegion function in footprintR provides a flexible interface for plotting data in a given genomic region. As will be illustrated below, both read-level data, summary-level data (aggregating across all reads overlapping a position) and data from BigWig files can visualized. In addition, predefined regions can be highlighted with background color in any track, and gene models or any other genomic region indicators can be added.\nGenerally, plotRegion builds up a plot as a combination of individual tracks, of different types (representing the different data types mentioned above). To add a track to a plot, at least the corresponding trackType and trackData arguments must be specified. A list of the supported track types is available in the documentation of plotRegion (see the tracks argument). The order and content of the tracks are fully customizable by the user.\nWe start by loading the required packages. In addition to the software package, we load a BSgenome and TxDb object providing the mouse genome sequence and transcript annotation.\nShow/hide code\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\nTxDbName &lt;- \"TxDb.Mmusculus.GENCODE.GRCm39.gencodeM34\"\n\nlibrary(BiocParallel)\nlibrary(footprintR)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(GenomicRanges)\nlibrary(BSgenomeName, character.only = TRUE)\nlibrary(TxDbName, character.only = TRUE)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\ngenome(gnm) &lt;- \"mm39\"\n\n# Load TxDb and create GRangesList with transcript annotations\ntxdb &lt;- get(TxDbName)\nebt &lt;- exonsBy(txdb, \"tx\", use.names = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#read-data",
    "href": "visualize-regions.html#read-data",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.2 Read data",
    "text": "4.2 Read data\nTo exemplify the plotting capabilities of plotRegion, we use modBam files from two wild-type samples, for which 6mA modification calling has been performed. We use the readModBam function to read data from an 800-bp region on chromosome 8 and store it in a SummarizedExperiment object. For more information about reading data with footprintR, see Chapter 2.\n\n\nShow/hide code\n# Read data \nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286301-39287100\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#read-level-plots",
    "href": "visualize-regions.html#read-level-plots",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.3 Read-level plots",
    "text": "4.3 Read-level plots\nRead-level plots can be generated using either the Heatmap or the Lollipop track type, assuming that there is at least one assay with read-level data present in the provided SummarizedExperiment object. The heatmap visualizes each base with a modification call as a filled rectangle, with optional interpolation between observations. The lollipop plot visualizes each base with a modification call as a filled circle. In both cases, the fill color represents the recorded modification probability of the base. For the read-level plot tracks, the trackData argument specifies the name of the (read-level) assay that should be displayed.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\", \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\")\n    )\n)\n\n\n\n\n\n\n\n\nFigure 4.1\n\n\n\n\n\nIn the current plot, reads on both strands are visualized, and can be distinguished based on the position of the modified bases (the As). It is possible to visualize only the reads on one strand, by providing a stranded region to plotRegion.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800:+\", \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\")\n    )\n)\n\n\n\n\n\n\n\n\nFigure 4.2\n\n\n\n\n\nMoreover, we can limit the display to only positions where the annotated genome has a given sequence (here, an A). This is often helpful to minimize the impact of base calling errors.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800:+\", \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\")\n    ), \n    sequenceContext = \"A\"\n)\n\n\n\n\n\n\n\n\nFigure 4.3\n\n\n\n\n\nEach plot function comes with a set of arguments that can be used to control the way that data is displayed in the track (see the documentation of plotRegion for the full list). For example, we can add interpolation to our heatmap, disable the automatic clustering of the reads, and add custom track and legend titles. For the lollipop plot, we can similarly change the size of the circles and the linewidth of the circle outline.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\",\n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\"\n)\n\n\n\n\n\n\n\n\nFigure 4.4\n\n\n\n\n\nAdditional customization options for read-level plots include the possibility to change the color scheme, set the order of the reads, and restricting the set of visualized reads to those that cover a certain fraction of the plot region. Below, we use a ‘inferno’ color scale for the heatmap, and a gradient from white to blue for the lollipop plot. In addition, we order the reads by the average modification fraction across the region (orderReads = \"regionAvg\"), and exclude any reads that don’t cover at least 95% of the plotted region (minCoveredFraction = 0.95).\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\",\n    minCoveredFraction = 0.95,\n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = \"regionAvg\", trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\", fillColors = \"-inferno\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = \"regionAvg\", trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1, \n             fillColors = c(\"white\", \"blue\"))\n    ), \n    sequenceContext = \"A\"\n)\n\n\n\n\n\n\n\n\nFigure 4.5\n\n\n\n\n\nBy default, read-level tracks are facetted by sample (the columns of se). We can facet by an arbitrary column of colData(se) by changing the value of the facetBy argument for the track, or set the argument to NULL to disable the facetting and show reads from all samples together.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\",\n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\", facetBy = NULL),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1,\n             facetBy = \"modbase\")\n    ), \n    sequenceContext = \"A\"\n)\n\n\n\n\n\n\n\n\nFigure 4.6\n\n\n\n\n\nBy default, the x-axis of the plots represent genomic coordinates. In some cases (especially if the modified bases are unevenly distributed), the plot may be easier to read if only the modified bases are displayed, evenly spaced along the x-axis. This can be achieved by setting modbaseSpace = TRUE in plotRegion.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\",\n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = FALSE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\",\n    modbaseSpace = TRUE\n)\n\n\n\n\n\n\n\n\nFigure 4.7\n\n\n\n\n\nAnother alternative is to anchor the x-axis at a given genomic position, and display the coordinates as distances from this anchor point. This is achieved by setting the referenceCoordinate argument to the numeric position that should be used as the anchor. Note how the x-axis title changes to reflect the current coordinate system.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\",\n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\",\n    referenceCoordinate = 39286700\n)\n\n\n\n\n\n\n\n\nFigure 4.8\n\n\n\n\n\nAs plotRegion returns a patchwork/ggplot2 object, even finer control over the plot components is possible. For example, you may want to change the number of ticks on the x axis, which is controlled by ggplot2’s scale_x_continuous(). Changing the x axis scale will throw a warning because by adding the scale_x_continuous(), you are replacing the existing default x axis scale.\nNote that if you are plotting multiple tracks with plotRegion, you need to add scale_x_continuous() using the * or & operator from the patchwork package, instead of ggplot2’s usual + operator. This will make sure that the plot element (here the new x axis scale) is added to all tracks instead of just the last one:\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = \"chr8:39286600-39286800\",\n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\",\n    referenceCoordinate = 39286700\n) * scale_x_continuous(n.breaks = 3)\n\n\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n\n\n\n\n\n\n\n\nFigure 4.9",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#summary-level-plots",
    "href": "visualize-regions.html#summary-level-plots",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.4 Summary-level plots",
    "text": "4.4 Summary-level plots\nIn addition to read-level plots, plotRegion can also display summary-level data (a single value per genomic position and sample), if they are present in the SummarizedExperiment object. These values can be displayed as individual points, and/or with a smooth curve. Summary-level assays can be generated from read-level values using, e.g., the flattenReadLevelAssay function.\n\n\nShow/hide code\n# Flatten read-level assay\nse &lt;- flattenReadLevelAssay(\n    se, \n    assayName = \"mod_prob\",\n    statistics = c(\"Nmod\", \"Nvalid\", \"FracMod\")\n)\n\n# Add summary-level track\nplotRegion(\n    se, \n    region = as(\"chr8:39286300-39287100\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"Smooth\", trackData = \"FracMod\")\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1))\n\n\n\n\n\n\n\n\nFigure 4.10\n\n\n\n\n\nIn an analogous way to the read-level plots, we can control the display of summary information using the arguments to PlotSummaryPointSmooth (see documentation for plotRegion). For example, we can change the smoothing function and the degree of smoothing. We can also add the individual points (summary values for individual positions) to the summary plot.\n\n\nShow/hide code\n# Add summary-level plot\nplotRegion(\n    se, \n    region = as(\"chr8:39286300-39287100\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1))\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1))\n\n\n\n\n\n\n\n\nFigure 4.11",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#highlight-regions",
    "href": "visualize-regions.html#highlight-regions",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.5 Highlight regions",
    "text": "4.5 Highlight regions\nSometimes it is helpful to be able to highlight specific genomic regions in the plots. These could be, for example, regions that have been identified as harboring an interesting signal. In plotRegion, this can be achieved via the highlightRegions argument to the respective tracks. The input provided to this argument should be a GRanges object.\n\n\nShow/hide code\n# Define regions to highlight\nreg_to_highlight &lt;- GRanges(\n    seqnames = \"chr8\",\n    ranges = IRanges(\n        start = c(39286800, 39286950),\n        end = c(39286900, 39287000)\n    )\n)\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286300-39287100\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1),\n             highlightRegions = reg_to_highlight)\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1))\n\n\n\n\n\n\n\n\nFigure 4.12",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#annotation-tracks",
    "href": "visualize-regions.html#annotation-tracks",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.6 Annotation tracks",
    "text": "4.6 Annotation tracks\nTo further relate the observed data to existing annotations, plotRegion also allows the user to add one or several tracks representing genomic regions (e.g., gene models). Here, we exemplify how to generate such a track to visualize annotated transcripts in the displayed region.\n\n\nShow/hide code\n# Read data from a different region than above (as the previous one does not \n# overlap annotated genes)\nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39126917-39128220\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\nse &lt;- flattenReadLevelAssay(\n    se, \n    assayName = \"mod_prob\",\n    statistics = c(\"Nmod\", \"Nvalid\", \"FracMod\")\n)\n\nplotRegion(\n    se, \n    region = as(\"chr8:39126917-39128220\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"GenomicRegion\", \n             trackData = subsetByOverlaps(ebt, as(\"chr8:39126917-39128220\", \"GRanges\"))),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1))\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1, 1))\n\n\n\n\n\n\n\n\nFigure 4.13",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#bigwig-tracks",
    "href": "visualize-regions.html#bigwig-tracks",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.7 BigWig tracks",
    "text": "4.7 BigWig tracks\nFinally, plotRegion allows the user to include tracks defined by arbitrary BigWig files. Here, we illustrate this by adding a track containing the coverage obtained from a CTCF ChIP-seq experiment. We also modify the colors used to display the summary-level data.\n\n\nShow/hide code\nplotRegion(\n    se, \n    region = as(\"chr8:39126917-39128220\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"GenomicRegion\", \n             trackData = subsetByOverlaps(ebt, as(\"chr8:39126917-39128220\", \"GRanges\"))),\n        list(trackType = \"BigWig\", trackData = c(wt = \"data/mESC_wt_CTCF_ChIP_rep1.bw\"),\n             yAxisLabel = \"CTCF\", showLegend = FALSE,\n             colors = c(wt = \"forestgreen\")),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1),\n             colors = c(wt1 = \"steelblue\", wt2 = \"firebrick2\"))\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1, 0.5, 1))\n\n\n\n\n\n\n\n\nFigure 4.14",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#session-info",
    "href": "visualize-regions.html#session-info",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.8 Session info",
    "text": "4.8 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                          1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n AnnotationDbi                                * 1.70.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                 * 1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bit                                            4.6.0     2025-03-06 [1] CRAN (R 4.5.0)\n bit64                                          4.6.0-1   2025-01-16 [1] CRAN (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n blob                                           1.2.4     2023-03-17 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n cachem                                         1.1.0     2024-05-16 [1] CRAN (R 4.5.0)\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DBI                                            1.2.3     2024-06-02 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n dplyr                                          1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                              1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicFeatures                              * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                      * 3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n KEGGREST                                       1.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n labeling                                       0.4.3     2023-08-29 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                         1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                                 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                    1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n memoise                                        2.0.1     2021-11-26 [1] CRAN (R 4.5.0)\n patchwork                                    * 1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n png                                            0.1-8     2022-11-29 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n Rsamtools                                      2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n RSQLite                                        2.4.1     2025-06-08 [1] CRAN (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                       1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SparseArray                                    1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n SummarizedExperiment                           1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                          1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n TxDb.Mmusculus.GENCODE.GRCm39.gencodeM34     * 0.1.0     2025-04-17 [1] Bioconductor\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n viridisLite                                    0.4.2     2023-05-02 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html",
    "href": "nucleosomes.html",
    "title": "5  Nucleosome analyses",
    "section": "",
    "text": "5.1 Preparation\nA prominent source of signal in single molecule footprinting data are nucleosomes that protect the DNA that is wound around the histones but leave the DNA between nucleosome particles, the linkers, accessible to modifications.\nIn this chapter, we illustrate how footprintR can be used to place single nucleosomes onto individual reads (see Section 5.3) or estimate the average distance between neighboring nucleosomes (Section 5.4).\nWe first load the packages and the genome needed for these tasks.\nShow/hide code\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\n\nlibrary(footprintR)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(GenomicRanges)\nlibrary(SummarizedExperiment)\nlibrary(BSgenomeName, character.only = TRUE)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\ngenome(gnm) &lt;- \"mm39\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#read-data",
    "href": "nucleosomes.html#read-data",
    "title": "5  Nucleosome analyses",
    "section": "5.2 Read data",
    "text": "5.2 Read data\nOur data is obtained from modBam file from a wild-type sample, for which 6mA modification calling has been performed. We use the readModBam function to read data from an 2000-bp region around a CTCF binding site on chromosome 8 and store it in a SummarizedExperiment object. For more information about reading data with footprintR, see Chapter 2.\n\n\nShow/hide code\n# Read data\nctcfsite &lt;- as(\"chr8:6622465-6622483\", \"GRanges\")\nreg &lt;- resize(ctcfsite, width = 2000, fix = \"center\")\n\nse &lt;- readModBam(\n    bamfiles = c(wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = reg,\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\n\n# add summary-level assays\nse &lt;- flattenReadLevelAssay(se)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#sec-place-nucleosomes",
    "href": "nucleosomes.html#sec-place-nucleosomes",
    "title": "5  Nucleosome analyses",
    "section": "5.3 Placing nucleosome footprints",
    "text": "5.3 Placing nucleosome footprints\nThe calcFootprintScores function uses a vector of weights to identify high-scoring regions on individual reads that show the modification pattern given in these weights. The score of a region on a read measures how well modification probabilities correlate with weights in the weight vector. High-scoring footprints that score above a provided threshold can be added to our se object using addFootprints, which will call calcFootprintScores internally.\nIn order to find nucleosomes, we construct a weight vector called wgt of a total length of 170 bp, consisting of a central 140 bp region in which we expect low modifications (the region protected by the nucleosome) flanked by two linker regions of 15 bp each in which we expect high modification. We adjust the weights in the flanks and central region such that the overall mean is close to zero:\n\n\nShow/hide code\n# nucleosome footprint\nwgt &lt;- rep(c(0.5, -0.5, 0.5) * c(140/170, 30/170, 140/170), c(15, 140, 15))\nmean(wgt)\n\n\n[1] -8.115253e-18\n\n\nShow/hide code\nggplot(data.frame(Position = seq_along(wgt), Weight = wgt),\n       aes(Position, Weight)) +\n    geom_col() +\n    geom_hline(yintercept = 0, linetype = \"dashed\") +\n    theme_bw()\n\n\n\n\n\n\n\n\nFigure 5.1\n\n\n\n\n\nNow we can scan the reads for high-scoring footprints and add them to the colData of our SummarizedExperiment object, under a column name given by the name argument:\n\n\nShow/hide code\nse &lt;- addFootprints(se = se, wgt = wgt, thresh = 0.03, name = \"nucl\")\n\n\nℹ calculating footprint scores\n\n\n✔ calculating footprint scores [485ms]\n\n\n\n\n\nℹ segmenting footprint scores\n\n\n✔ segmenting footprint scores [1.1s]\n\n\n\n\n\nThe footprints are stored as a list with one element for each sample, containing an IRangesList. Its elements are the reads of that sample, and the ranges correspond to individual footprints:\n\n\nShow/hide code\nse$nucl\n\n\n$wt2\nIRangesList object of length 62:\n$`wt2-2b63fef6-6d5c-4aa4-b6a1-aebd5390cc83`\nIRanges object with 37 ranges and 0 metadata columns:\n           start       end     width\n       &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;\n   [1]   6610367   6610506       140\n   [2]   6610900   6611039       140\n   [3]   6611097   6611236       140\n   [4]   6611677   6611816       140\n   [5]   6612665   6612804       140\n   ...       ...       ...       ...\n  [33]   6622587   6622726       140\n  [34]   6622762   6622901       140\n  [35]   6623311   6623450       140\n  [36]   6623890   6624029       140\n  [37]   6624088   6624227       140\n\n...\n&lt;61 more elements&gt;\n\n\nThe nucleosome footprints can be visualized using plotRegion:\n\n\nShow/hide code\nplotRegion(se, region = reg,\n           tracks = list(list(trackData=\"mod_prob\", trackType=\"Heatmap\",\n                              interpolate = TRUE,\n                              footprintColumns = \"nucl\",\n                              arglistFootprints = list(nucl = list(color = alpha(\"firebrick\", 0.5))),\n                              orderReads = \"squish\"),\n                         list(trackData = \"FracMod\", trackType = \"Smooth\",\n                              smoothMethod=\"rollingMean\", windowSize=41,\n                              highlightRegions = ctcfsite)),\n                    sequenceContext = \"A\") +\n        patchwork::plot_layout(heights = c(2, 0.6))\n\n\n\n\n\n\n\n\nFigure 5.2",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#sec-estimate-nrl",
    "href": "nucleosomes.html#sec-estimate-nrl",
    "title": "5  Nucleosome analyses",
    "section": "5.4 Estimating nucleosome repeat length",
    "text": "5.4 Estimating nucleosome repeat length\nPlacing of individual nucleosomes in principle allows also measuring their average distance, the nucleosome repeat length (NRL). This measure can also be obtained without placing of nucleosomes, from the distribution of distances between modified bases in which multiples of the NRL are over-represented. This idea is related to the phasogram analysis described by Valouev et al. (2011).\nIn footprintR, this analysis can be performed by first calculating the distribution of distances between modified bases using calcModbaseSpacing:\n\n\nShow/hide code\nmoddist &lt;- calcModbaseSpacing(se)\nstr(moddist)\n\n\nList of 1\n $ wt2: Named num [1:1000] 3513 2262 1789 1296 1176 ...\n  ..- attr(*, \"names\")= chr [1:1000] \"1\" \"2\" \"3\" \"4\" ...\n\n\nFrom this distribution, which was obtained from just 62 reads, we can accurately estimate the NRL using estimateNRL:\n\n\nShow/hide code\nres &lt;- estimateNRL(x = moddist$wt2)\nres[1:2]\n\n\n$nrl\n[1] 190.3\n\n$nrl.CI95\n   2.5 %   97.5 % \n187.6821 192.9179 \n\n\nAlternatively, the distance distribution can also be visualized together with an estimate of the NRL using plotModbaseSpacing, either as a summary plot:\n\n\nShow/hide code\nplotModbaseSpacing(x = moddist$wt2)\n\n\n\n\n\n\n\n\nFigure 5.3\n\n\n\n\n\n… or as a set of three plots that illustrate the different steps of the estimation:\n\n\nShow/hide code\nplotModbaseSpacing(x = moddist$wt2, detailedPlots = TRUE)\n\n\n\n\n\n\n\n\nFigure 5.4",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#quantifying-nucleosome-phasing",
    "href": "nucleosomes.html#quantifying-nucleosome-phasing",
    "title": "5  Nucleosome analyses",
    "section": "5.5 Quantifying nucleosome phasing",
    "text": "5.5 Quantifying nucleosome phasing\nNucleosomes that occupy similar positions across reads are called phased and can result for example from a sequence-specific DNA binding protein that constrains their movement along the DNA. Genomic regions with phased nucleosomes can be identified on the summary-level data by phasingScoreFourier, which calculates the strength of a periodic component in the summary-level data corresponding to the expected period of nucleosomes (see Section 5.4 for how that period can be estimated).\nWe start such an analysis by first reading summary-level data for a larger genomic region, in which we want to calculate phasing scores:\n\n\nShow/hide code\nreg &lt;- GRanges(\"chr8\", IRanges(6637500, 6642500))\nse &lt;- readModBam(\n    bamfiles = c(wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = reg,\n    level = \"summary\",\n    trim = TRUE,\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\n\n\nNext, we construct windowgr, a GRanges objects defining the windows in reg for which we want to calculate a nucleosome phasing score:\n\n\nShow/hide code\nwindowStep &lt;- 190\nwindowSize &lt;- 4 * windowStep\ns &lt;- seq(start(reg), end(reg) - (windowSize - windowStep) + 1, by = windowStep)\nwindowgr &lt;- GRanges(seqnames = seqnames(reg),\n                    ranges = IRanges(start = s, width = windowSize))\n\n\nFinally, we calculate phasing socres for the windows in windowgr. The windowSize and the value of the numCoef argument define the period of interest \\(poi = windowSize / (numCoef - 1)\\) (here: 190 bp, see phasingScoreFourier for details):\n\n\nShow/hide code\nseFourier &lt;- phasingScoreFourier(se = se, gr = windowgr, numCoef = 5)\n\n\nWe can plot the window scores together with the fraction of modification. Note that the sequential windows for which the phasing score was calculated are overlapping (the window with the maximal phasing score is indicated by the red line below):\n\n\nShow/hide code\n# get plotting data using plotRegion\np &lt;- plotRegion(se, region = reg,\n                tracks = list(list(trackData = \"FracMod\", trackType = \"Smooth\",\n                                   smoothMethod = \"rollingMean\", windowSize = 101)))\npd &lt;- p$layers[[1]]$data\n\n# get phasing scores\npd2 &lt;- as.data.frame(rowRanges(seFourier))\npd2$position &lt;- mid(rowRanges(seFourier))\npd2$phasingScoreAbs &lt;- assay(seFourier, \"phasingScoreAbs\")[, \"wt2\"]\n\n# visualize\nggplot(mapping = aes(x = position)) +\n    geom_tile(data = pd2,\n              mapping = aes(y = mean(pd$value_smooth), fill = phasingScoreAbs),\n              width = windowStep, height = Inf, alpha = 0.4) +\n    scale_fill_viridis_c() +\n    geom_segment(data = pd2[which.max(pd2$phasingScoreAbs), , drop = FALSE],\n                 inherit.aes = FALSE,\n                 mapping = aes(x = start, xend = end, y = min(pd$value_smooth)),\n                 colour = \"red\", linewidth = 2) +\n    geom_line(data = pd,\n              mapping = aes(y = value_smooth)) +\n    ylim(range(pd$value_smooth)) +\n    labs(x = paste0(\"Position on \", seqnames(reg), \" (bp)\"),\n         y = \"Fraction of modified bases\",\n         fill = paste0(\"Phasing score\\n\", windowStep, \" bp period\")) +\n    theme_bw() +\n    theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nFigure 5.5",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#session-info",
    "href": "nucleosomes.html#session-info",
    "title": "5  Nucleosome analyses",
    "section": "5.6 Session info",
    "text": "5.6 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                          1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                   1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n class                                          7.3-23    2025-01-01 [2] CRAN (R 4.5.0)\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n dplyr                                          1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n e1071                                          1.7-16    2024-09-16 [1] CRAN (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                              1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                      * 3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n labeling                                       0.4.3     2023-08-29 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                         1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                               * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                  * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n patchwork                                    * 1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n proxy                                          0.4-27    2022-06-09 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n Rsamtools                                      2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                       1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n signal                                         1.8-1     2024-06-26 [1] CRAN (R 4.5.0)\n SparseArray                                    1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n SummarizedExperiment                         * 1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                          1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n viridisLite                                    0.4.2     2023-05-02 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\nValouev, Anton, Steven M. Johnson, Scott D. Boyd, Cheryl L. Smith, Andrew Z. Fire, and Arend Sidow. 2011. “Determinants of Nucleosome Organization in Primary Human Cells.” Nature 474 (7352): 516–20. https://doi.org/10.1038/nature10002.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "scanning.html",
    "href": "scanning.html",
    "title": "6  Scanning the genome for regions of interest",
    "section": "",
    "text": "6.1 Genome-wide DMR scanning (between samples)\nfootprintR provides a flexible scanning framework, which can be used to partition the genome (or a subset thereof) into windows and calculate a custom score for each window. Optionally, neighboring windows with similar scores can then be merged into larger signal regions. In this chapter, we show some examples of how this framework can be used to scan the genome for various types of signals of interest.\nThe figure below illustrates the general idea of the scanning framework.\nThe first step is to define the windows and calculate some quantity of interest for each of them, using the quantifyWindowsInRegion function. Next, these quantities are passed to a score function, which summarizes the input data into a score for each window - this can, for example, perform a differential methylation analysis based on the counts of methylated and unmethylated nucleotides obtained from quantifyWindowsInRegion. Finally, the window scores are processed using processWindowScores. This function allows neighboring windows with similar scores to be merged into larger signal regions. The user can choose to either call the functions directly, or use the wrapper function scanForHighScoringRegions.\nThanks to the modularity, the scanning framework is flexible and can accommodate many different use cases by selecting a suitable quantification function, scoring function and aggregation of the scores. The table below lists some of the applications that can be accommodated with the functions that are provided within footprintR. However, the user can also define their own functions for specific use cases.\nBelow we will show several examples of using the scanning framework for different purposes.\nThe first use case involves scanning for differentially methylated regions (DMRs) between two conditions, based on 6mA data. In our case, we will compare wild-type mouse ES cells to ‘TKO’ mouse ES cells where the three DNA methyltransferases (Dnmts) have been knocked out. For time reasons, we limit the scanning to chromosome 19 - the most efficient way of performing a genome-wide analysis is typically to parallelize over chromosomes (e.g. by replacing the lapply call in the code below by a parallelized version).\nWe tile the genome into 30bp windows (windowSize), shifted successively by 15bp (windowStep) to achieve a high resolution and minimize the risk of splitting a region of interest in the middle (thereby potentially losing the signal). We then use the sumNmodNvalid function to count the number of modified As for each window, as well as the total number of As. The classification of nucleotides is obtained by thresholding the modification probability using the modProbThreshold value (0.5). Given the modified and total count for each sample, we next use the getDifferentiallyModifiedWindows score function to perform the differential methylation analysis for each window. This will return several statistics, including the dirNegLog10PValue, which is obtained by calculating -log10(p-value) and multiplying with the sign of the log-fold change. We will use this statistic (scoreCol) as the input for the final processing of the windows. Briefly, the statistics will be smoothed over neighboring windows (the degree of smoothing is controlled by the minperiod argument) and subsequently thresholded (thresh argument). Neighboring windows where the statistic exceeds this threshold will be fused into a larger region of interest, unless they are separated by more than 50 nucleotides (maxGap).\nShow/hide code\n# define bam files to include\nbamfiles &lt;- c(\"data/mESC_wt_6mA_rep1.bam\", \"data/mESC_wt_6mA_rep2.bam\",\n              \"data/mESC_TKO_6mA_rep1.bam\", \"data/mESC_TKO_6mA_rep2.bam\")\nnames(bamfiles) &lt;- sub(\"\\\\.bam\", \"\", basename(bamfiles))\n\n# define sample annotation table\nsampleAnnot &lt;- data.frame(sample = names(bamfiles),\n                          group = factor(str_extract(names(bamfiles), \"wt|TKO\"), \n                                         levels = c(\"wt\", \"TKO\")))\nShow/hide code\n# run scanning of chromosome 19\nchrlens &lt;- seqlengths(gnm)[\"chr19\"]\ndmrL &lt;- lapply(seq_along(chrlens), function(i) {\n    scanForHighScoringRegions(\n        bamfiles = bamfiles,\n        sampleAnnot = sampleAnnot,\n        chromosomeLengths = chrlens[i],\n        quantFunction = \"sumNmodNvalid\",\n        scoreFunction = \"getDifferentiallyModifiedWindows\",\n        modbase = \"a\",\n        modProbThreshold = 0.5,\n        tileSize = 2e+06,\n        seqinfo = seqinfo(gnm),\n        sequenceContextWidth = 1,\n        sequenceReference = gnm,\n        sequenceContext = \"A\",\n        windowMode = \"fixed\",\n        windowSize = 30,\n        windowStep = 15,\n        scoreCol = \"dirNegLog10PValue\",\n        scoreAction = \"smoothFuse\",\n        thresh = 3,\n        minperiod = 3,\n        maxGap = 50,\n        BPPARAM = bpParam,\n        verbose = interactive())\n})\nEach element of the resulting list (in this case, there is only one) contains the inferred DMRs for one chromosome.\nShow/hide code\nlength(dmrL[[1]])\n\n\n[1] 32498\n\n\nShow/hide code\nhead(dmrL[[1]])\n\n\nGRanges object with 6 ranges and 5 metadata columns:\n      seqnames          ranges strand | dirNegLog10PValueThresh\n         &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt; |               &lt;numeric&gt;\n  [1]    chr19 3051451-3051480      * |                 3.02470\n  [2]    chr19 3051841-3051915      * |                 3.49924\n  [3]    chr19 3052036-3052110      * |                 5.05907\n  [4]    chr19 3052591-3052650      * |                 3.72814\n  [5]    chr19 3053191-3053265      * |                 3.83881\n  [6]    chr19 3053386-3053445      * |                 3.86745\n      numWindowsThresh direction dirNegLog10PValue numWindows\n             &lt;integer&gt;  &lt;factor&gt;         &lt;numeric&gt;  &lt;integer&gt;\n  [1]                1  positive           3.02470          1\n  [2]                4  positive           3.49924          4\n  [3]                4  positive           5.05907          4\n  [4]                3  positive           3.72814          3\n  [5]                4  positive           3.83881          4\n  [6]                3  positive           3.86745          3\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n\nShow/hide code\ntable(dmrL[[1]]$direction)\n\n\n\npositive negative \n   32490        8\nWe can visualize one of the top hits using plotRegion.\nShow/hide code\nreg &lt;- dmrL[[1]][which.max(abs(dmrL[[1]]$dirNegLog10PValue))]\nse &lt;- readModBam(bamfiles = bamfiles, sampleAnnot = sampleAnnot, \n                 regions = reg + 500, modbase = \"a\", \n                 seqinfo = seqinfo(gnm), sequenceContextWidth = 1, \n                 sequenceReference = gnm, trim = TRUE, \n                 verbose = interactive())\nse &lt;- flattenReadLevelAssay(se)\nplotRegion(se, region = reg + 500, sequenceContext = \"A\", \n           tracks = list(list(trackData = \"mod_prob\", trackType = \"Heatmap\",\n                              interpolate = TRUE),\n                         list(trackData = \"FracMod\", trackType = \"Smooth\",\n                              colorBy = \"group\", highlightRegions = reg))) + \n    plot_layout(heights = c(3, 1))\n\n\n\n\n\n\n\n\nFigure 6.3",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#genome-wide-dmr-scanning-between-samples",
    "href": "scanning.html#genome-wide-dmr-scanning-between-samples",
    "title": "6  Scanning the genome for regions of interest",
    "section": "",
    "text": "6.1.1 Choosing suitable values for thresholds and smoothing parameters\nIn the example above, we smooth the window scores and fuse neighboring windows with smoothed scores above a certain threshold (3). The parameters for this step of the analysis were determined by inspecting the intermediate results obtained from applying the quantification and scoring functions independently to a small region of the genome. Here we illustrate how this can be done, using a 5MB region on chromosome 19. First, we call the quantifyWindowsInRegion function, with sumNmodNvalid as the quantFunction, to get the total and modified nucleotide and the fraction of modified nucleotides for each window. The windows will be automatically defined within the specified region, given the indicated window size and step.\n\n\nShow/hide code\n# define the small region\nregSmall &lt;- \"chr19:31000000-36000000\"\n\n# define windows in the small region and quantify data in windows\nse &lt;- quantifyWindowsInRegion(bamfiles = bamfiles,\n                              region = regSmall,\n                              modbase = \"a\",\n                              modProbThreshold = 0.5,\n                              sampleAnnot = sampleAnnot,\n                              seqinfo = seqinfo(gnm),\n                              sequenceContextWidth = 1,\n                              sequenceReference = gnm,\n                              sequenceContext = \"A\",\n                              windowMode = \"fixed\",\n                              windowSize = 30,\n                              windowStep = 15,\n                              quantFunction = \"sumNmodNvalid\",\n                              BPPARAM = bpParam,\n                              verbose = interactive())\n\n\nThe output of quantifyWindowsInRegion is a SummarizedExperiment object, with assays for the Nmod, Nvalid and FracMod values for each window in each sample.\n\n\nShow/hide code\nse\n\n\nclass: RangedSummarizedExperiment \ndim: 333073 4 \nmetadata(1): readLevelData\nassays(3): Nmod Nvalid FracMod\nrownames(333073): 1 2 ... 333331 333332\nrowData names(0):\ncolnames(4): mESC_wt_6mA_rep1 mESC_wt_6mA_rep2 mESC_TKO_6mA_rep1\n  mESC_TKO_6mA_rep2\ncolData names(3): sample modbase group\n\n\nNext, we apply the score function (getDifferentiallyModifiedWindows) to perform the differential methylation analysis for each window.\n\n\nShow/hide code\ngr &lt;- getDifferentiallyModifiedWindows(se, verbose = interactive())\n\n\nThis function (as all other score functions compatible with the footprintR scanning framework) returns a GRanges object containing the windows, with scores as metadata columns.\n\n\nShow/hide code\ngr\n\n\nGRanges object with 333073 ranges and 9 metadata columns:\n           seqnames            ranges strand |     logFC    logCPM        LR\n              &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n       [1]    chr19 31000000-31000029      * |  0.807304  0.629767   2.45710\n       [2]    chr19 31000015-31000044      * |  0.742682  0.697488   2.06101\n       [3]    chr19 31000030-31000059      * |  0.636205  0.516105   1.54618\n       [4]    chr19 31000045-31000074      * |  0.508839  0.762750   0.95991\n       [5]    chr19 31000060-31000089      * |  0.648976  0.770806   1.60876\n       ...      ...               ...    ... .       ...       ...       ...\n  [333069]    chr19 35999905-35999934      * | 0.1183276 0.0717503 0.0623986\n  [333070]    chr19 35999920-35999949      * | 0.2911895 0.5566819 0.3401543\n  [333071]    chr19 35999935-35999964      * | 0.0709167 0.5667234 0.0202314\n  [333072]    chr19 35999950-35999979      * | 0.2903877 0.2983924 0.3527457\n  [333073]    chr19 35999965-35999994      * | 0.7348412 0.7163173 1.8874211\n              PValue       FDR dirNegLog10PValue FracMod_wt FracMod_TKO\n           &lt;numeric&gt; &lt;numeric&gt;         &lt;numeric&gt;  &lt;numeric&gt;   &lt;numeric&gt;\n       [1]  0.116994  0.402987          0.931835   0.129820    0.200790\n       [2]  0.151110  0.437962          0.820708   0.145305    0.213280\n       [3]  0.213700  0.494005          0.670195   0.141810    0.190575\n       [4]  0.327210  0.581068          0.485174   0.136349    0.176522\n       [5]  0.204666  0.486337          0.688954   0.165851    0.233447\n       ...       ...       ...               ...        ...         ...\n  [333069]  0.802744  0.891057         0.0954228  0.3054885    0.314199\n  [333070]  0.559740  0.739766         0.2520135  0.2349981    0.259468\n  [333071]  0.886893  0.939795         0.0521289  0.2306079    0.229048\n  [333072]  0.552563  0.735028         0.2576182  0.1846282    0.212466\n  [333073]  0.169493  0.455429         0.7708480  0.0793377    0.125558\n           DeltaFracMod\n              &lt;numeric&gt;\n       [1]    0.0709699\n       [2]    0.0679755\n       [3]    0.0487643\n       [4]    0.0401731\n       [5]    0.0675964\n       ...          ...\n  [333069]   0.00871096\n  [333070]   0.02446953\n  [333071]  -0.00155955\n  [333072]   0.02783778\n  [333073]   0.04621999\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n\nAt this point, we can either keep the results on the individual window level, or attempt to fuse neighboring windows with high scores, using the processWindowScores function. We will illustrate the latter using the dirNegLog10PValue as the score column. First, we plot the estimates of this score along the genomic region (just a small part of it, for visibility).\n\n\nShow/hide code\nggplot(as.data.frame(gr[6700:7200]), aes(x = start, y = dirNegLog10PValue)) + \n    geom_line() + \n    theme_bw()\n\n\n\n\n\n\n\n\nFigure 6.4\n\n\n\n\n\nTo determine suitable smoothing parameters, we can call the processWindow with scoreAction = \"smooth\".\n\n\nShow/hide code\n(grsmooth &lt;- processWindowScores(gr, scoreCol = \"dirNegLog10PValue\", \n                                 scoreAction = \"smooth\", minperiod = 3))\n\n\nGRanges object with 333073 ranges and 9 metadata columns:\n           seqnames            ranges strand |     logFC    logCPM        LR\n              &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\n       [1]    chr19 31000000-31000029      * |  0.807304  0.629767   2.45710\n       [2]    chr19 31000015-31000044      * |  0.742682  0.697488   2.06101\n       [3]    chr19 31000030-31000059      * |  0.636205  0.516105   1.54618\n       [4]    chr19 31000045-31000074      * |  0.508839  0.762750   0.95991\n       [5]    chr19 31000060-31000089      * |  0.648976  0.770806   1.60876\n       ...      ...               ...    ... .       ...       ...       ...\n  [333069]    chr19 35999905-35999934      * | 0.1183276 0.0717503 0.0623986\n  [333070]    chr19 35999920-35999949      * | 0.2911895 0.5566819 0.3401543\n  [333071]    chr19 35999935-35999964      * | 0.0709167 0.5667234 0.0202314\n  [333072]    chr19 35999950-35999979      * | 0.2903877 0.2983924 0.3527457\n  [333073]    chr19 35999965-35999994      * | 0.7348412 0.7163173 1.8874211\n              PValue       FDR dirNegLog10PValue FracMod_wt FracMod_TKO\n           &lt;numeric&gt; &lt;numeric&gt;         &lt;numeric&gt;  &lt;numeric&gt;   &lt;numeric&gt;\n       [1]  0.116994  0.402987          0.877458   0.129820    0.200790\n       [2]  0.151110  0.437962          0.764158   0.145305    0.213280\n       [3]  0.213700  0.494005          0.661064   0.141810    0.190575\n       [4]  0.327210  0.581068          0.706547   0.136349    0.176522\n       [5]  0.204666  0.486337          0.911285   0.165851    0.233447\n       ...       ...       ...               ...        ...         ...\n  [333069]  0.802744  0.891057         0.0687533  0.3054885    0.314199\n  [333070]  0.559740  0.739766         0.1374055  0.2349981    0.259468\n  [333071]  0.886893  0.939795         0.2544209  0.2306079    0.229048\n  [333072]  0.552563  0.735028         0.4199374  0.1846282    0.212466\n  [333073]  0.169493  0.455429         0.5510439  0.0793377    0.125558\n           DeltaFracMod\n              &lt;numeric&gt;\n       [1]    0.0709699\n       [2]    0.0679755\n       [3]    0.0487643\n       [4]    0.0401731\n       [5]    0.0675964\n       ...          ...\n  [333069]   0.00871096\n  [333070]   0.02446953\n  [333071]  -0.00155955\n  [333072]   0.02783778\n  [333073]   0.04621999\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n\nThis replaces the dirNegLog10PValue column with a smoothed version, which we can see by plotting it overlaid on the unsmoothed values.\n\n\nShow/hide code\nplotdf &lt;- data.frame(\n    position = start(gr[6700:7200]), \n    raw = gr$dirNegLog10PValue[6700:7200],\n    smoothed = grsmooth$dirNegLog10PValue[6700:7200]\n) |&gt;\n    pivot_longer(names_to = \"type\", values_to = \"score\", -position)\nggplot(plotdf, aes(x = position, y = score, color = type)) + \n    geom_line() +\n    scale_color_manual(values = c(raw = \"black\", smoothed = \"red\")) + \n    theme_bw()\n\n\n\n\n\n\n\n\nFigure 6.5\n\n\n\n\n\nBased on these values, we can now also decide on a suitable value for the threshold parameter, which will be applied to the smoothed values to determine which windows show a strong signal.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#genome-wide-estimation-of-cpg-methylation-levels-within-samples",
    "href": "scanning.html#genome-wide-estimation-of-cpg-methylation-levels-within-samples",
    "title": "6  Scanning the genome for regions of interest",
    "section": "6.2 Genome-wide estimation of CpG methylation levels (within samples)",
    "text": "6.2 Genome-wide estimation of CpG methylation levels (within samples)\nIn the example above, the scores were calculated over windows of different size. By setting the window size to 1, we can also calculate single nucleotide-level scores. Here, as an example, we illustrate how to estimate the global distribution of methylation levels across all CpGs in the genome. For time reasons, as above we only consider chromosome 19 here.\nIn this case, we again use sumNmodNvalid as the quantFunction, as it provides an estimate of the fraction modified bases for each window (in this case, since the window size is 1, for each modified base). We use getRangesWithAssayValues as the scoreFunction, which will move the calculated values from the FracMod and Nvalid assays to the metadata columns of the nucleotide-level GRanges object. By setting scoreAction to “pass”, we instruct the scanning framework to not process the nucleotide-level scores further, but simply return the GRanges object with the added metadata columns. Finally, by setting the sequenceContext to “NCG”, we make sure to only retain positions where the genomic sequence is CG.\n\n\nShow/hide code\n# Define the bam file to use and generate sample annotation table\nbamfiles &lt;- c(wt2 = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\")\nsampleAnnot &lt;- data.frame(sample = names(bamfiles))\n\n# Run scanning\nchrlens &lt;- seqlengths(gnm)[\"chr19\"]\nrescpgL &lt;- lapply(seq_along(chrlens), function(i) {\n    scanForHighScoringRegions(\n        bamfiles = bamfiles,\n        sampleAnnot = sampleAnnot,\n        chromosomeLengths = chrlens[i],\n        quantFunction = \"sumNmodNvalid\",\n        quantFunctionArgs = list(),\n        scoreFunction = \"getRangesWithAssayValues\",\n        scoreFunctionArgs = list(assayName = c(\"FracMod\", \"Nvalid\")),\n        modbase = \"m\",\n        modProbThreshold = 0.5,\n        tileSize = 1e6,\n        seqinfo = seqinfo(gnm),\n        sequenceContextWidth = 3,\n        sequenceReference = gnm,\n        sequenceContext = \"NCG\",\n        windowMode = \"fixed\",\n        windowSize = 1,\n        windowStep = 1,\n        scoreCol = paste0(\"FracMod.\", names(bamfiles)[1]),\n        scoreAction = \"pass\",\n        BPPARAM = bpParam,\n        verbose = FALSE\n    )\n})\n\n\nNext, we plot the distribution of modification fractions.\n\n\nShow/hide code\nplotdf &lt;- as.data.frame(unname(rescpgL[[1]])) |&gt;\n    tidyr::pivot_longer(cols = -c(seqnames, start, end, width, strand), \n                        names_to = c(\".value\", \"sample\"),\n                        names_pattern = '(FracMod|Nvalid)\\\\.(.*)') |&gt; \n    dplyr::mutate(FracModBin = Hmisc::cut2(FracMod,cuts = seq(0, 1, by = 0.1)))\nhead(plotdf)\n\n\n# A tibble: 6 × 9\n  seqnames   start     end width strand sample FracMod Nvalid FracModBin\n  &lt;fct&gt;      &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;     \n1 chr19    3050119 3050119     1 *      wt2       1         4 [0.9,1.0] \n2 chr19    3050120 3050120     1 *      wt2       1         2 [0.9,1.0] \n3 chr19    3050316 3050316     1 *      wt2       0.75      4 [0.7,0.8) \n4 chr19    3050317 3050317     1 *      wt2       1         2 [0.9,1.0] \n5 chr19    3050603 3050603     1 *      wt2       1         6 [0.9,1.0] \n6 chr19    3050604 3050604     1 *      wt2       1         1 [0.9,1.0] \n\n\nShow/hide code\nggplot(plotdf, aes(x = FracModBin)) + \n    geom_bar() + \n    labs(title = \"All CpGs\", x = \"FracMod (binned)\") + \n    theme_bw() + \n    theme(axis.text.y = element_text(size = 12),\n          axis.text.x = element_text(size = 12, angle = 45, hjust = 1),\n          axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\nFigure 6.6",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#annotation-of-predefined-windows",
    "href": "scanning.html#annotation-of-predefined-windows",
    "title": "6  Scanning the genome for regions of interest",
    "section": "6.3 Annotation of predefined windows",
    "text": "6.3 Annotation of predefined windows\nAs mentioned above, the individual functions called by scanForHighScoringRegions can also be used independently. This can be helpful in different settings - as already shown, it is helpful in order to determine suitable parameters and thresholds for the smoothing and fusing of windows. Another situation when it is useful is when the windows are predefined rather than obtained by tiling the genome into equally sized bins. To illustrate this use case, here we will use the quantifyWindowsInRegion function, together with the phasingScoreFourier quantFunction to annotate a set of CTCF sites with a score quantifying the degree of nucleosome phasing estimated from the average 6mA signal across reads in the region around the motif. This function calculates a phasing score for each window by decomposing the FracMod values into frequency components and extracting the amplitude of the component corresponding to a period consistent with the average nucleosome distance. Note that we set windowMode to \"predefined\", and define the desired windows via the windows argument. In addition, we use larger windows than above (760bp), to have enough data to be able to detect periodic patterns.\n\n\nShow/hide code\nbamfiles &lt;- c(\"data/mESC_wt_6mA_rep1.bam\")\nnames(bamfiles) &lt;- sub(\"\\\\.bam\", \"\", basename(bamfiles))\nsampleAnnot &lt;- data.frame(sample = names(bamfiles), \n                          group = \"wt\")\n\nperiod &lt;- 190\nwindowSize &lt;- 4 * period\nnumCoef &lt;- 5\n\n(ctcf_sites &lt;- readRDS(\"data/ctcf_sites_1000.rds\"))\n\n\nGRanges object with 1000 ranges and 1 metadata column:\n         seqnames              ranges strand |     score\n            &lt;Rle&gt;           &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt;\n     [1]     chr4 106387210-106387228      - |    21.751\n     [2]     chr2   29509735-29509753      + |    16.924\n     [3]    chr13 110505258-110505276      - |    19.577\n     [4]     chr3 121678692-121678710      + |    18.323\n     [5]     chr2   29509695-29509713      + |    17.356\n     ...      ...                 ...    ... .       ...\n   [996]     chr5   35519412-35519430      + |    19.651\n   [997]     chr8   23727858-23727876      + |    11.875\n   [998]     chr6 112468049-112468067      + |    16.978\n   [999]     chr4   44564745-44564763      + |    22.866\n  [1000]     chr8 106101422-106101440      + |    10.054\n  -------\n  seqinfo: 61 sequences (1 circular) from mm39 genome\n\n\nShow/hide code\nctcf_sites &lt;- resize(ctcf_sites, width = windowSize, fix = \"center\")\nctcf_sites &lt;- unstrand(ctcf_sites)\n\nse &lt;- readModBam(bamfiles = bamfiles, sampleAnnot = sampleAnnot, \n                 regions = ctcf_sites, modbase = \"a\", \n                 seqinfo = seqinfo(gnm), sequenceContextWidth = 1, \n                 sequenceReference = gnm, trim = TRUE, \n                 verbose = interactive())\nse &lt;- flattenReadLevelAssay(se)\n\nctcf_sites$phasing_scores &lt;- unlist(parallel::mclapply(\n    seq_along(ctcf_sites),\n    function(i) {\n        tmp &lt;- phasingScoreFourier(se = subsetByOverlaps(se, ctcf_sites[i]),\n                                   gr = ctcf_sites[i], numCoef = numCoef)\n        if (nrow(tmp) &gt; 0) {\n            phasingscores &lt;- assay(tmp, \"phasingScoreAbs\")[1, ]\n        } else {\n            phasingscores &lt;- NA\n        }\n        # average across samples (in this case only one sample is used)\n        mean(phasingscores, na.rm = TRUE)\n    }, mc.cores = BiocParallel::bpnworkers(bpParam)))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#session-info",
    "href": "scanning.html#session-info",
    "title": "6  Scanning the genome for regions of interest",
    "section": "6.4 Session info",
    "text": "6.4 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                          1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n backports                                      1.5.0     2024-05-23 [1] CRAN (R 4.5.0)\n base64enc                                      0.1-3     2015-07-28 [1] CRAN (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                 * 1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n checkmate                                      2.3.2     2024-07-29 [1] CRAN (R 4.5.0)\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n cluster                                        2.1.8.1   2025-03-12 [2] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n colorspace                                     2.1-1     2024-07-26 [1] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n dplyr                                        * 1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n edgeR                                          4.6.2     2025-05-07 [1] Bioconductor 3.21 (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n foreign                                        0.8-90    2025-03-31 [2] CRAN (R 4.5.0)\n Formula                                        1.2-5     2023-02-24 [1] CRAN (R 4.5.0)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                              1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                      * 3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gridExtra                                      2.3       2017-09-09 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n Hmisc                                        * 5.2-3     2025-03-16 [1] CRAN (R 4.5.0)\n htmlTable                                      2.4.3     2024-07-21 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n labeling                                       0.4.3     2023-08-29 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n limma                                          3.64.1    2025-05-25 [1] Bioconductor 3.21 (R 4.5.0)\n locfit                                         1.5-9.12  2025-03-05 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                         1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                               * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                  * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n nnet                                           7.3-20    2025-01-01 [2] CRAN (R 4.5.0)\n patchwork                                    * 1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n rpart                                          4.1.24    2025-01-07 [2] CRAN (R 4.5.0)\n Rsamtools                                      2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n rstudioapi                                     0.17.1    2024-10-22 [1] CRAN (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                       1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n signal                                         1.8-1     2024-06-26 [1] CRAN (R 4.5.0)\n SparseArray                                    1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n statmod                                        1.5.0     2023-01-06 [1] CRAN (R 4.5.0)\n stringi                                        1.8.7     2025-03-27 [1] CRAN (R 4.5.0)\n stringr                                      * 1.5.1     2023-11-14 [1] CRAN (R 4.5.0)\n SummarizedExperiment                         * 1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                        * 1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n utf8                                           1.2.6     2025-06-08 [1] CRAN (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n viridisLite                                    0.4.2     2023-05-02 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html",
    "href": "grouping-reads.html",
    "title": "7  Grouping reads",
    "section": "",
    "text": "7.1 Preparation\nWhen reading data with footprintR, the reads will automatically be grouped by sample (i.e., the name assigned to each input files). As we have seen in earlier chapters, this is reflected by the columns of the SummarizedExperiment object generated by the reading functions corresponding to samples, with individual reads stored in a nested fashion within the samples. In practice, this means that any summary statistics, e.g. calculated by flattenReadLevelAssay, will be calculated by sample, and plotRegion will facet the reads by sample. In some situations, we may wish to group the reads by something other than the sample that they stem from. How to achieve this will be the focus of the current chapter.\nWe first load the packages and the genome needed for these tasks.\nShow/hide code\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\n\nlibrary(footprintR)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(GenomicRanges)\nlibrary(SummarizedExperiment)\nlibrary(BSgenomeName, character.only = TRUE)\nlibrary(VariantAnnotation)\nlibrary(stringdist)\nlibrary(BiocParallel)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\ngenome(gnm) &lt;- \"mm39\"",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#sec-group-by-sequence",
    "href": "grouping-reads.html#sec-group-by-sequence",
    "title": "7  Grouping reads",
    "section": "7.2 Using sequence variation",
    "text": "7.2 Using sequence variation\nOne reason for regrouping reads could be to sort them using genetic variation (e.g., single nucleotide variants), e.g. with the purpose of studying allele-specific signals. Typically, the heterozygous loci on which we would like to base such read grouping are known in advance (alternatively, we can use all positions within a given genomic region). In such cases, readModBam can automatically add “sequence labels” (consisting of the observed nucleotide in the indicated positions) to reads when reading the data, and these labels can later be used to regroup the reads.\nLet’s consider an example. We start by defining a region of interest, and reading a file with known heterozygous SNVs (for the purposes of this report, we have subset the complete VCF file to only SNVs overlapping the region of interest, but this is not necessary in general).\n\n\nShow/hide code\nreg &lt;- resize(as(\"chr7:23987184-23987363\", \"GRanges\"), width = 1300, fix = \"center\")\n\nhetsnv &lt;- readVcf(\"data/het_snp_chr7_23987184-23987363.vcf.gz\")\nhetpos &lt;- as(rowRanges(hetsnv), \"GPos\")\nhetpos$ALT &lt;- unlist(hetpos$ALT)\nhetpos\n\n\nUnstitchedGPos object with 13 positions and 5 metadata columns:\n                    seqnames       pos strand | paramRangeID            REF\n                       &lt;Rle&gt; &lt;integer&gt;  &lt;Rle&gt; |     &lt;factor&gt; &lt;DNAStringSet&gt;\n  chr7:23986770_G/T     chr7  23986770      * |           NA              G\n  chr7:23986885_G/A     chr7  23986885      * |           NA              G\n  chr7:23987082_T/G     chr7  23987082      * |           NA              T\n  chr7:23987109_G/A     chr7  23987109      * |           NA              G\n  chr7:23987130_A/C     chr7  23987130      * |           NA              A\n                ...      ...       ...    ... .          ...            ...\n  chr7:23987468_A/G     chr7  23987468      * |           NA              A\n  chr7:23987586_G/C     chr7  23987586      * |           NA              G\n  chr7:23987658_A/G     chr7  23987658      * |           NA              A\n  chr7:23987665_C/A     chr7  23987665      * |           NA              C\n  chr7:23987670_C/T     chr7  23987670      * |           NA              C\n                               ALT      QUAL      FILTER\n                    &lt;DNAStringSet&gt; &lt;numeric&gt; &lt;character&gt;\n  chr7:23986770_G/T              T   504.609           .\n  chr7:23986885_G/A              A   485.725           .\n  chr7:23987082_T/G              G   421.622           .\n  chr7:23987109_G/A              A   420.142           .\n  chr7:23987130_A/C              C   509.378           .\n                ...            ...       ...         ...\n  chr7:23987468_A/G              G   480.559           .\n  chr7:23987586_G/C              C   425.562           .\n  chr7:23987658_A/G              G   336.694           .\n  chr7:23987665_C/A              A   338.173           .\n  chr7:23987670_C/T              T   372.650           .\n  -------\n  seqinfo: 61 sequences from an unspecified genome\n\n\nWe next generate “expected” REF and ALT sequences by concatenating the sequences of the heterozygous SNVs overlapping the region of interest. These sequences will later be used to group reads into one of two categories (REF or ALT), based on the agreement with the expected sequences. Note that with this approach, we’re making the implicit assumption that the SNVs are phased (and thus that a read will not typically harbor a mix of the REF and ALT nucleotides) - for most reads in our example this turns out to be a valid assumption, but in other cases other grouping schemes may be preferable.\n\n\nShow/hide code\n# subset to SNVs in region of interest\nhetpos1 &lt;- subsetByOverlaps(hetpos, reg, ignore.strand = TRUE)\n(seqREF &lt;- paste(as.character(hetpos1$REF), collapse = \"\"))\n\n\n[1] \"GGTGATGTAGACC\"\n\n\nShow/hide code\n(seqALT &lt;- paste(as.character(hetpos1$ALT), collapse = \"\"))\n\n\n[1] \"TAGACCACGCGAT\"\n\n\nNext, we generate two versions of the genome sequence, obtained by injecting, respectively, the REF and ALT nucleotide above into the corresponding positions. These genomes will later be used to generate sequence contexts for the positions seen in the data, and filter out positions that are not annotated as (in the case below) CpGs. For more information about filtering, and how it can reduce the effect of sequencing errors, see Chapter 3 and Chapter 4.\n\n\nShow/hide code\ngnmREF &lt;- gnmALT &lt;- getSeq(gnm)\nfor (chr in names(gnmREF)) {\n    i &lt;- which(seqnames(hetpos) == chr)\n    gnmREF[[chr]] &lt;- replaceLetterAt(x = gnmREF[[chr]],\n                                     at = start(hetpos)[i],\n                                     letter = unlist(hetpos$REF[i]),\n                                     verbose = interactive())\n    gnmALT[[chr]] &lt;- replaceLetterAt(x = gnmALT[[chr]],\n                                     at = start(hetpos)[i],\n                                     letter = unlist(hetpos$ALT[i]),\n                                     verbose = interactive())\n}\n\n\nAfter this preparation, we read the data. In this case, we will work with a modBam file from a wild-type sample, for which 5mCpG modification calling has been performed. We specify the positions of the heterozygous SNVs to the variantPositions argument, which will generate a sequence label for each read.\n\n\nShow/hide code\nseC &lt;- readModBam(\n    bamfiles = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\", \n    regions = reg,\n    modbase = \"m\", \n    level = \"read\",\n    variantPositions = hetpos1, \n    trim = TRUE,\n    BPPARAM = BiocParallel::SerialParam(),\n    verbose = interactive()\n)\n# derived sequence labels\nseC$readInfo$s1$variant_label\n\n\n [1] \"TATACTGCGCGAT\" \"TAGACCAAGCCA-\" \"TAT-CAAGGCGAT\" \"TATAC--------\"\n [5] \"GGAGATGTAGACC\" \"TAGACCA-GCGAT\" \"GGTGATGTAGACC\" \"TAGACCACGCGAT\"\n [9] \"GGTGA-GTAGACC\" \"TGCACACCGCAAT\" \"CATACTACGGG-T\" \"GGTGATGTAGACC\"\n[13] \"GGTGACGTAGACC\" \"TAGACCA-GCGAT\" \"TAGACTACGCGAT\" \"-A-ACTGTGCA-C\"\n[17] \"TAGACCACGCGAC\" \"GGTGATGTAGACC\" \"TAGACCACGCGAT\" \"GGTGATGTAGAT-\"\n[21] \"TAGACCACGCGAT\" \"TAGACCACGCGAT\" \"TAGACCACGCGAT\" \"GATGATGTAGGCC\"\n[25] \"GGTGATGTAGACC\" \"GGTGATGTAGATA\" \"GGTGATGTAGACC\" \"-ATAC-A-GTGAT\"\n[29] \"GGTGATGTAGACC\" \"TAGA-CATGCGGT\" \"GGTGATG-AGACC\" \"TATACCACGCGAT\"\n[33] \"TAGACTACGCGAT\" \"TAGACCACGCGAT\" \"TAGACCACGCGAT\" \"TAGACCACGCGGT\"\n[37] \"TAGACTACGCGAT\" \"GGTGATGTAGACC\" \"GGTGATGTAGACC\" \"TAGACCACGCGAT\"\n[41] \"TGGACCACGCGAT\" \"TAGA-CACGCGAT\" \"GGTGATGTAGACC\" \"GGTGATGTAGACC\"\n[45] \"-ATACCACGCGA-\" \"-GTGATGTAGACC\" \"--TGATGTAGACC\" \"--TGATGTAGATC\"\n[49] \"----CCACGCGAT\" \"-------TGCGCT\" \"-------TAGACC\" \"-------TAGACC\"\n[53] \"--------AGACC\" \"----------GAT\" \"----------ACC\" \"-------------\"\n[57] \"-------------\"\n\n\nNext, we filter the data by sequence context, to only retain positions annotated as CG in both the REF and ALT genomes generated above. We achieve this by sequentially adding the sequence context from each of the genomes, and filtering by this sequence context.\n\n\nShow/hide code\n# REF genome\nseC &lt;- addSeqContext(x = seC, sequenceContextWidth = 3,\n                     sequenceReference = gnmREF)\nseC &lt;- filterPositions(seC, filters = \"sequenceContext\",\n                       sequenceContext = \"NCG\", assayNameNA = \"mod_prob\")\n# ALT genome\nseC &lt;- addSeqContext(x = seC, sequenceContextWidth = 3,\n                     sequenceReference = gnmALT)\nseC &lt;- filterPositions(seC, filters = \"sequenceContext\",\n                       sequenceContext = \"NCG\", assayNameNA = \"mod_prob\")\n\n\nWith the clean data, we next cluster the reads into two groups, based on which of the two expected sequences (seqREF or seqALT above) the respective sequence labels are most similar to. We request a Hamming distance of at most 0.34 based on the positions covered by the read - otherwise, the read is assigned to an NA category\n\n\nShow/hide code\n(varlabels &lt;- structure(\n    unlist(lapply(seC$readInfo, \"[[\", \"variant_label\"), use.names = FALSE),\n    names = unlist(lapply(seC$readInfo, rownames), use.names = FALSE)))\n\n\ns1-6e3b7da7-1cbb-467a-9824-e12f949740b9 s1-74ec6632-693e-4e13-a8a4-4946fa63f477 \n                        \"TATACTGCGCGAT\"                         \"TAGACCAAGCCA-\" \ns1-f6296e8a-c87d-4ae0-8e5c-ed928ada2544 s1-cd98081d-7042-4ce7-8a6e-67c835c5242d \n                        \"TAT-CAAGGCGAT\"                         \"TATAC--------\" \ns1-ca720391-dd3b-4448-8388-ec7bafe86221 s1-07c46b8a-69cf-4a1d-87cd-d787193c56d8 \n                        \"GGAGATGTAGACC\"                         \"TAGACCA-GCGAT\" \ns1-8a78dd6b-5ec1-4caf-959c-bb13647fec0d s1-c6860136-5766-487e-b264-34e0820e81ad \n                        \"GGTGATGTAGACC\"                         \"TAGACCACGCGAT\" \ns1-2b6c19d4-553c-4986-b8cd-27f71205a23a s1-889002b9-1f49-4b54-a6ae-becfc63973ba \n                        \"GGTGA-GTAGACC\"                         \"TGCACACCGCAAT\" \ns1-8086a333-caa3-4fe0-a24e-eb0477ab70da s1-c3eda2bf-3db4-4c01-8535-b70a764dcce8 \n                        \"CATACTACGGG-T\"                         \"GGTGATGTAGACC\" \ns1-ec9c9f06-9f37-47da-a9de-9f872a28622d s1-5dc9d447-fd02-4493-8c12-2de2b705f0a7 \n                        \"GGTGACGTAGACC\"                         \"TAGACCA-GCGAT\" \ns1-c23f32ba-6e41-4238-8f2f-5d7dc567094c s1-6b217655-278b-4a52-b76a-60e0b919e1bc \n                        \"TAGACTACGCGAT\"                         \"-A-ACTGTGCA-C\" \ns1-b8ec4fdc-2339-4a7a-acea-8d36a8c6191e s1-f7b1f575-bfad-46ee-bf0a-c252f41998e5 \n                        \"TAGACCACGCGAC\"                         \"GGTGATGTAGACC\" \ns1-d09a3082-8290-4a64-a1b0-16b955e9d377 s1-47422c66-d8d9-4cd5-bc63-253f8c664ce4 \n                        \"TAGACCACGCGAT\"                         \"GGTGATGTAGAT-\" \ns1-e21ea203-8b2b-4db3-82e7-3872c3aedbdb s1-6fe85a60-5c2b-4ab9-8eb8-c31c9823c52c \n                        \"TAGACCACGCGAT\"                         \"TAGACCACGCGAT\" \ns1-16ed4c6b-d7c4-45cf-a0ee-b5417715bd05 s1-4db7595b-53a5-43a0-8f26-4bf7c4eb8e2c \n                        \"TAGACCACGCGAT\"                         \"GATGATGTAGGCC\" \ns1-b292d6ed-c3f1-4996-8c09-758ee688d157 s1-8147266c-9bdf-48c1-95a2-3a8fe543072f \n                        \"GGTGATGTAGACC\"                         \"GGTGATGTAGATA\" \ns1-144ab6dd-2c83-4116-b742-f0767a0d78bd s1-bd1e55f8-aa2d-4746-9018-769f3c2cf7cc \n                        \"GGTGATGTAGACC\"                         \"-ATAC-A-GTGAT\" \ns1-0298ccd2-51a4-4567-bd62-9f7c08ebe222 s1-4e1b345e-d1a2-470c-b123-096f1b89ffc9 \n                        \"GGTGATGTAGACC\"                         \"TAGA-CATGCGGT\" \ns1-ab4e005c-d6bd-46c0-bf70-880811d9a4cb s1-f47dafdf-2e54-473c-8c91-de47074168c8 \n                        \"GGTGATG-AGACC\"                         \"TATACCACGCGAT\" \ns1-f972a57a-22e0-4dda-9cbd-c9a9546ef7d4 s1-bc571ef1-141b-499f-a0ec-f8ed4d304b36 \n                        \"TAGACTACGCGAT\"                         \"TAGACCACGCGAT\" \ns1-f93df80d-7a5b-40fe-a704-611e87857ef7 s1-bedd36a7-b697-4ade-8d9d-84c21a7a1bce \n                        \"TAGACCACGCGAT\"                         \"TAGACCACGCGGT\" \ns1-197fa983-613c-40cf-bfc6-195d57250b61 s1-09ca0166-cded-466c-90d7-074b76f6c462 \n                        \"TAGACTACGCGAT\"                         \"GGTGATGTAGACC\" \ns1-39a0b0f7-ed43-44a4-931f-649b94858fd5 s1-1575671f-db5c-4840-8903-e049f5d1c191 \n                        \"GGTGATGTAGACC\"                         \"TAGACCACGCGAT\" \ns1-13cf1365-9558-4731-b905-9375968236ce s1-cf62e24a-3b16-4984-9dce-722d83114a04 \n                        \"TGGACCACGCGAT\"                         \"TAGA-CACGCGAT\" \ns1-635eac53-bf72-4595-8f0a-ed25889ade7c s1-6bce848a-e1e3-4c58-ae13-782de5ad8353 \n                        \"GGTGATGTAGACC\"                         \"GGTGATGTAGACC\" \ns1-f8708894-fcdc-4bb4-b4f0-85962022c458 s1-21af2d84-95cc-4038-92de-ca10dc907c1b \n                        \"-ATACCACGCGA-\"                         \"-GTGATGTAGACC\" \ns1-18b3d1ae-13bc-4167-a62d-985df0226d5d s1-84372ce1-9eb4-49a1-bfdf-0fcfe550a1e3 \n                        \"--TGATGTAGACC\"                         \"--TGATGTAGATC\" \ns1-2e5ac26d-fb0d-4960-a990-717820ea5489 s1-a11ee0c2-efe1-49db-a777-fd693d49f644 \n                        \"----CCACGCGAT\"                         \"-------TGCGCT\" \ns1-77d34112-3371-4dc4-90e2-c5fce537de28 s1-1193f97a-20eb-43b0-856f-6ce487960d71 \n                        \"-------TAGACC\"                         \"-------TAGACC\" \ns1-ceaddd34-9916-435c-8d7d-624ee5aa2f7c s1-be1188b2-5e8e-4c3b-b1c9-f745fb787f02 \n                        \"--------AGACC\"                         \"----------GAT\" \ns1-30b6af10-7d70-4ace-b40a-4fdb7d97d600 s1-4c257eb0-b51a-4e0d-bb99-fc072f15f8fd \n                        \"----------ACC\"                         \"-------------\" \n\n\nShow/hide code\ndists &lt;- stringdistmatrix(a = c(seqREF, seqALT),\n                          b = varlabels, method = \"hamming\",\n                          nthread = 2) / nchar(varlabels[1])\nmethGroup &lt;- ifelse(colMins(dists) &lt; 0.34,\n                    paste0(c(\"REF\", \"ALT\"), \": \", c(seqREF, seqALT))[apply(dists, 2, which.min)], NA)\ntable(methGroup, useNA = \"ifany\")\n\n\nmethGroup\nALT: TAGACCACGCGAT REF: GGTGATGTAGACC               &lt;NA&gt; \n                24                 20                 12 \n\n\nBased on this read grouping, we can now regroup the reads in such a way that the columns of the SummarizedExperiment object corresponds to allele (REF or ALT) rather than the sample. This is achieved with the regroupReads function.\n\n\nShow/hide code\n# generate named list of read groups\nmethGroupList &lt;- split(names(varlabels), methGroup)\n\n# regroup reads\nseCgrouped &lt;- regroupReads(seC, methGroupList)\n\n# calculate average modification fraction by allele\nseCgrouped &lt;- flattenReadLevelAssay(seCgrouped, keepReads = TRUE)\n\n# plot\nplotRegion(seCgrouped, region = reg,\n           tracks = list(\n               list(trackData = \"mod_prob\", trackType = \"Lollipop\",\n                    legendTitle = \"5mCpG\"),\n               list(trackData = \"FracMod\", trackType = \"Point\",\n                    arglistPoint = list(size = 3)))) +\n    plot_layout(heights = c(7.5, 1.5))\n\n\n\n\n\n\n\n\nFigure 7.1\n\n\n\n\n\nIn this example, we notice a clear difference in methylation between the two alleles.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#modification-based",
    "href": "grouping-reads.html#modification-based",
    "title": "7  Grouping reads",
    "section": "7.3 Modification based",
    "text": "7.3 Modification based\nAs an alternative to the genetic grouping used above, we could also group the reads based on the observed data. To exemplify this, we will look at a known imprinted locus in the Peg10 gene, split the reads based on the average CpG methylation in the locus, and compare the levels of 6mA modifications between the groups.\nFirst, we read the CpG methylation data and filter positions to only retain those in a CpG context.\n\n\nShow/hide code\npeg10 &lt;- as(\"chr6:4746792-4748791\", \"GRanges\")\n\nseC &lt;- readModBam(\n    bamfiles = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\", \n    regions = peg10,\n    modbase = \"m\", \n    sequenceReference = gnm,\n    sequenceContextWidth = 3,\n    seqinfo = seqinfo(gnm),\n    trim = TRUE,\n    BPPARAM = BiocParallel::SerialParam(),\n    verbose = interactive()\n)\nseC &lt;- filterPositions(\n    seC, \n    filters = \"sequenceContext\",\n    sequenceContext = \"NCG\"\n)\n\n\nNext, we calculate the average modification fraction per read. We note a clear bimodality of the distribution, and define two groups of reads based on this.\n\n\nShow/hide code\n# calculate average modification fraction per read\navgmod &lt;- colMeans(as.matrix(assay(seC, \"mod_prob\")), na.rm = TRUE)\n\nggplot(data.frame(avgmod = avgmod), aes(x = avgmod)) +\n    geom_histogram() +\n    labs(x = \"Average modification probability per read (CpG)\") + \n    theme_bw(base_size = 16)\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nShow/hide code\nread_groups &lt;- split(colnames(as.matrix(assay(seC, \"mod_prob\"))), \n                     c(\"paternal\", \"maternal\")[(avgmod &gt; 0.5) + 1])\n\n\n\n\n\n\n\n\nFigure 7.2\n\n\n\n\n\nNext, we read the 6mA data for the same sample, filter by sequence context and regroup the reads based on the split defined above.\n\n\nShow/hide code\nseA &lt;- readModBam(\n    bamfiles = \"data/mESC_wt_6mA_rep2.bam\", \n    regions = peg10,\n    modbase = \"a\", \n    sequenceReference = gnm,\n    sequenceContextWidth = 1,\n    seqinfo = seqinfo(gnm),\n    trim = TRUE,\n    BPPARAM = BiocParallel::SerialParam(),\n    verbose = interactive()\n)\nseA &lt;- filterPositions(\n    seA, \n    filters = \"sequenceContext\",\n    sequenceContext = \"A\"\n)\nseA &lt;- regroupReads(seA, readGroups = read_groups)\n# check that the columns of seA now correspond to read groups\ncolnames(seA)\n\n\n[1] \"maternal\" \"paternal\"\n\n\nWith the new read grouping, we next calculate summary statistics and visualize the 6mA data.\n\n\nShow/hide code\nseA &lt;- flattenReadLevelAssay(seA)\n\nplotRegion(seA, region = peg10, sequenceContext = \"A\", \n           tracks = list(list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n                              interpolate = TRUE, legendTitle = \"6mA\", \n                              orderReads = \"squish\"),\n                         list(trackType = \"Smooth\", trackData = \"FracMod\"))) + \n    plot_layout(heights = c(3, 1))\n\n\n\n\n\n\n\n\nFigure 7.3",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#across-different-regions",
    "href": "grouping-reads.html#across-different-regions",
    "title": "7  Grouping reads",
    "section": "7.4 Across different regions",
    "text": "7.4 Across different regions\nNext, we will illustrate how to use footprintR to create metaplots. In these plots, each row represents an (equally sized) genomic region. Here, we will exemplify this by generating a metaplot of a collection of 1,000 strong CTCF sites:\n\n\nShow/hide code\n(ctcf_sites &lt;- readRDS(\"data/ctcf_sites_1000.rds\"))\n\n\nGRanges object with 1000 ranges and 1 metadata column:\n         seqnames              ranges strand |     score\n            &lt;Rle&gt;           &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt;\n     [1]     chr4 106387210-106387228      - |    21.751\n     [2]     chr2   29509735-29509753      + |    16.924\n     [3]    chr13 110505258-110505276      - |    19.577\n     [4]     chr3 121678692-121678710      + |    18.323\n     [5]     chr2   29509695-29509713      + |    17.356\n     ...      ...                 ...    ... .       ...\n   [996]     chr5   35519412-35519430      + |    19.651\n   [997]     chr8   23727858-23727876      + |    11.875\n   [998]     chr6 112468049-112468067      + |    16.978\n   [999]     chr4   44564745-44564763      + |    22.866\n  [1000]     chr8 106101422-106101440      + |    10.054\n  -------\n  seqinfo: 61 sequences (1 circular) from mm39 genome\n\n\nWe first load summary-level data from all reads overlapping 1.5kb regions centered on these sites, and filter positions based on the sequence context.\n\n\nShow/hide code\nse &lt;- readModBam(bamfiles = \"data/mESC_wt_6mA_rep1.bam\",\n                 regions = resize(ctcf_sites, width = 1500, fix = \"center\"),\n                 modbase = \"a\",\n                 level = \"summary\",\n                 trim = TRUE,\n                 seqinfo = seqinfo(gnm),\n                 sequenceContextWidth = 1,\n                 sequenceReference = gnm,\n                 verbose = interactive())\nse &lt;- filterPositions(se, filters = \"sequenceContext\",\n                      sequenceContext = \"A\",\n                      assayNameNA = NULL)\n\n\nNext, we use the getAnchorRegions function to extract the FracMod values for each of the regions. Note that all regions must have the same size. Hence, we specify the midpoints of the regions as well as the desired size.\n\n\nShow/hide code\nagg &lt;- getAnchorRegions(se, assayName = \"FracMod\",\n                        regionMidpoints = as(resize(ctcf_sites, width = 1, fix = \"center\"), \"GPos\"),\n                        regionWidth = 1501,\n                        reverseMinusStrandRegions = TRUE,\n                        verbose = interactive())\n\n\nIn the resulting object, the positions are represented on the ‘anchor’ reference sequence, with positions ranging from -750 to +750.\n\n\nShow/hide code\nagg\n\n\nclass: RangedSummarizedExperiment \ndim: 1501 1 \nmetadata(1): readLevelData\nassays(1): FracMod\nrownames: NULL\nrowData names(0):\ncolnames(1): s1\ncolData names(2): sample region_FracMod\n\n\nWe can think of the FracMod assay in agg as similar to a read-level assay - each column corresponds to a sample, and is represented as an NaMatrix with each column corresponding to a region. Consequently, we can calculate additional summary assays, aggregating information across all regions, using flattenReadLevelAssay.\n\n\nShow/hide code\nagg &lt;- flattenReadLevelAssay(agg, assayName = \"FracMod\", statistics = \"Pmod\")\n\n\nFinally, we use plotRegion to create the metaplot. We include both a heatmap where each row corresponds to a region, and a summary plot aggregating across regions.\n\n\nShow/hide code\nplotRegion(agg, region = as(\"anchor:-750-750\", \"GRanges\"), \n           tracks = list(list(trackData = \"FracMod\", trackType = \"Heatmap\",\n                              interpolate = TRUE),\n                         list(trackData = \"Pmod\", trackType = \"Smooth\"))) + \n    patchwork::plot_layout(heights = c(3, 1))\n\n\n\n\n\n\n\n\nFigure 7.4",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#session-info",
    "href": "grouping-reads.html#session-info",
    "title": "7  Grouping reads",
    "section": "7.5 Session info",
    "text": "7.5 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                          1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n AnnotationDbi                                  1.70.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                 * 1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bit                                            4.6.0     2025-03-06 [1] CRAN (R 4.5.0)\n bit64                                          4.6.0-1   2025-01-16 [1] CRAN (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n blob                                           1.2.4     2023-03-17 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n cachem                                         1.1.0     2024-05-16 [1] CRAN (R 4.5.0)\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DBI                                            1.2.3     2024-06-02 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n dplyr                                          1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                              1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicFeatures                                1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                      * 3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n KEGGREST                                       1.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n labeling                                       0.4.3     2023-08-29 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                         1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                               * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                  * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n memoise                                        2.0.1     2021-11-26 [1] CRAN (R 4.5.0)\n patchwork                                    * 1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n png                                            0.1-8     2022-11-29 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n Rsamtools                                    * 2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n RSQLite                                        2.4.1     2025-06-08 [1] CRAN (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                       1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SparseArray                                    1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n stringdist                                   * 0.9.15    2025-01-10 [1] CRAN (R 4.5.0)\n SummarizedExperiment                         * 1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                          1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n VariantAnnotation                            * 1.54.1    2025-05-11 [1] Bioconductor 3.21 (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n viridisLite                                    0.4.2     2023-05-02 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html",
    "href": "multiple-modalities.html",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "",
    "text": "8.1 Load data and packages\nSingle molecule footprinting data itself may already provide more than a single data modality: While 6mA calls provide information about the accessiblity of sequenced molecules, additional base modifications such as 5mCpG and 5hmCpG inform about endogenous modification states. When working with data from diploid organisms, the sequence at heterozygous loci allows separate quantification of individual alleles (see Section 7.2).\nIn the sections below we are illustrating the integration of the above data modalities (allele-specific accessibility and DNA methylation at CpG dinucleotides) with ChIP-seq data at heterozygous CTCF binding sites. This illustrates how the sequence variation that discriminates the two alleles affects the binding of CTCF, and consequently also the chromatin accessibility and DNA methylation of each allele.\nWe start by loading the required packages, high-confidence heterozygous SNVs and preparing reference (REF) and alternative (ALT) version of the genome by injecting the SNVs into the genome assembly.\nShow/hide code\n# Packages\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\nlibrary(footprintR)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(dplyr)\nlibrary(ggpubr)\nlibrary(GenomicRanges)\nlibrary(GenomicAlignments)\nlibrary(VariantAnnotation)\nlibrary(SummarizedExperiment)\nlibrary(BSgenomeName, character.only = TRUE)\nlibrary(JASPAR2024)\nlibrary(TFBSTools)\nlibrary(universalmotif)\nlibrary(forcats)\nlibrary(Hmisc)\nlibrary(parallel)\nlibrary(stringdist)\nlibrary(SparseArray)\n\n# number of CPUs to use for parallel tasks\nncpu &lt;- 24\n\n# modBam files\nbamfilesC &lt;- c(WT_1 = \"data/mESC_wt_5mCG_5hmCG_rep1.bam\",\n               WT_2 = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\")\nbamfilesA &lt;- c(WT_1 = \"data/mESC_wt_6mA_rep1.bam\",\n               WT_2 = \"data/mESC_wt_6mA_rep2.bam\")\n\n# ChIP bam files\nchipbam &lt;- c(CTCF_1 = \"data/mESC_wt_CTCF_ChIP_rep1.bam\", # GSM747534\n             CTCF_2 = \"data/mESC_wt_CTCF_ChIP_rep2.bam\", # GSM747535\n             CTCF_3 = \"data/mESC_wt_CTCF_ChIP_rep3.bam\") # GSM747534\n\n# Heterozygous SNVs\nhetsnv &lt;- readVcf(\"data/het_snp.vcf.gz\")\n\n# ... extract SNV positions and make sure they are not indels\nhetpos &lt;- as(rowRanges(hetsnv), \"GPos\")\nstopifnot(all(width(hetpos$REF) == 1L))\nstopifnot(all(lengths(hetpos$ALT) == 1L))\nstopifnot(all(width(unlist(hetpos$ALT)) == 1L))\nhetpos$ALT &lt;- unlist(hetpos$ALT)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\n\n# ... create refernce and alternative genomes by injecting SNVs\ngnmREF &lt;- gnmALT &lt;- getSeq(gnm)\nfor (chr in names(gnmREF)) {\n    i &lt;- which(seqnames(hetpos) == chr)\n    gnmREF[[chr]] &lt;- replaceLetterAt(x = gnmREF[[chr]],\n                                     at = start(hetpos)[i],\n                                     letter = unlist(hetpos$REF[i]),\n                                     verbose = interactive())\n    gnmALT[[chr]] &lt;- replaceLetterAt(x = gnmALT[[chr]],\n                                     at = start(hetpos)[i],\n                                     letter = unlist(hetpos$ALT[i]),\n                                     verbose = interactive())\n}",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html#scan-the-genome-with-the-ctcf-motif-and-identify-sites-that-overlap-sequence-variants",
    "href": "multiple-modalities.html#scan-the-genome-with-the-ctcf-motif-and-identify-sites-that-overlap-sequence-variants",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "8.2 Scan the genome with the CTCF motif and identify sites that overlap sequence variants",
    "text": "8.2 Scan the genome with the CTCF motif and identify sites that overlap sequence variants\nWe next get the CTCF motif from the Jaspar database (Rauluseviciute et al. (2024)) and scan the genome for high scoring matches that overlap heterozygous SNVs.\nWe will scan both reference and alternative version of the genome and combine them afterwards, in order to not miss any high-scoring CTCF motif matches due to the presence of SNVs.\n\n\nShow/hide code\n# get CTCF motif from Jaspar\njaspar &lt;- JASPAR2024()\ndbfunc &lt;- getFromNamespace(x = \"db\", ns = \"JASPAR2024\")\nmdb &lt;- RSQLite::dbConnect(RSQLite::SQLite(), dbfunc(jaspar))\ntf_motif &lt;- getMatrixByID(x = mdb, ID = \"MA0139.2\")\nRSQLite::dbDisconnect(mdb)\nseqLogo(toICM(tf_motif), xaxis = FALSE, yaxis = FALSE)\n\n\n\n\n\n\n\n\nFigure 8.1\n\n\n\n\n\n\n\nShow/hide code\n# scan REF and ALT genomes for motif hits\nhitsREF &lt;- scan_sequences(motifs = tf_motif,\n                          sequences = gnmREF,\n                          threshold = 8e-5,\n                          threshold.type = \"pvalue\",\n                          RC = TRUE,\n                          use.gaps = FALSE,\n                          return.granges = TRUE,\n                          nthreads = ncpu,\n                          verbose = if(interactive()) 2 else 0)\nhitsALT &lt;- scan_sequences(motifs = tf_motif,\n                          sequences = gnmALT,\n                          threshold = 8e-5,\n                          threshold.type = \"pvalue\",\n                          RC = TRUE,\n                          use.gaps = FALSE,\n                          return.granges = TRUE,\n                          nthreads = ncpu,\n                          verbose = if(interactive()) 2 else 0)\n\n# combine (remove overlapping hits on the same strand)\nhits &lt;- reduce(c(hitsREF, hitsALT))\nhits &lt;- hits[width(hits) == length(tf_motif)]\n\n\nAt this point, we have 539 thousand hits to the CTCF motif in the genome. We next select the sites that overlap any of our heterozygous SNVs.\n\n\nShow/hide code\nhits_het &lt;- subsetByOverlaps(hits, hetpos, ignore.strand = TRUE)\n\n# filter out sites with more than 4 overlapping SNVs\nnSNVs &lt;- countOverlaps(hits_het, hetpos, ignore.strand = TRUE)\ntable(nSNVs)\n\n\nnSNVs\n   1    2    3    4    5    6 \n5136  651   96   25    4    2 \n\n\nShow/hide code\nhits_het &lt;- hits_het[nSNVs &lt;= 4]\n\n\nFinally, we score the 5908 heterozygous hits to get a motif match score for both reference and alternative alleles. We get a symmetric distribution around zero with similar numbers of motifs that increase and decrease there match score in ALT compared to REF. Only few motifs change there score by more than 50% of the maximal score (22.6).\n\n\nShow/hide code\n# score hits\nseqsREF &lt;- getSeq(gnmREF, hits_het)\nseqsALT &lt;- getSeq(gnmALT, hits_het)\n\nhits_het$scoreREF &lt;- score_match(motif = tf_motif, match = as.character(seqsREF))\nhits_het$scoreALT &lt;- score_match(motif = tf_motif, match = as.character(seqsALT))\nhits_het$scoreDelta &lt;- hits_het$scoreREF - hits_het$scoreALT\nhits_het$scoreDeltaPercent &lt;- hits_het$scoreDelta / hitsREF$max.score[1] * 100\nhits_het$scoreDeltaBinned &lt;- Hmisc::cut2(\n    x = hits_het$scoreDelta,\n    cuts = c(min(hits_het$scoreDelta) - 0.1, -10, -5, -2, 2, 5, 10,\n             max(hits_het$scoreDelta) + 0.1))\nhits_het$scoreDeltaBinned &lt;- fct_rev(hits_het$scoreDeltaBinned)\n\nscoreDeltaBinnedCols &lt;- structure(c(\"#611300\", \"#CC4E25\", \"#EBB0A8\",\n                                    \"#CCCCCC\", \"#B3D0E4\", \"#008BBD\",\n                                    \"#003560\"),\n                                  names = levels(hits_het$scoreDeltaBinned))\n\nggplot(as.data.frame(hits_het), aes(scoreDeltaPercent)) +\n    stat_bin(bins = 20, geom = \"col\",\n             aes(y = after_stat(count), fill = after_stat(x))) +\n    scale_fill_gradient2(low = scoreDeltaBinnedCols[1],\n                         mid = scoreDeltaBinnedCols[4],\n                         high = scoreDeltaBinnedCols[7]) +\n    geom_vline(xintercept = 0, linetype = \"dashed\") +\n    geom_vline(xintercept = c(-50, 50), linetype = \"dotted\") +\n    coord_cartesian(xlim = c(-100, 100)) +\n    labs(x = \"Change of motif score (% of maximal score, REF - ALT)\",\n         y = \"Number of CTCF motif hits\",\n         fill = \"Change of\\nmotif score\") +\n    theme_bw() +\n    theme(legend.position = \"inside\",\n          legend.position.inside = c(.02, .98),\n          legend.justification = c(0, 1))\n\n\n\n\n\n\n\n\nFigure 8.2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html#annotate-heterozygous-ctcf-sites",
    "href": "multiple-modalities.html#annotate-heterozygous-ctcf-sites",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "8.3 Annotate heterozygous CTCF sites",
    "text": "8.3 Annotate heterozygous CTCF sites\nWe next annotate our CTCF sites with experimental measurements. To account for the limited resolution and exploit the autocorrelation of our experimental data, we will include the data in a small window of 180bp around each CTCF site. Furthermore, we will run the calculations in parallel over the sites using mclapply from the parallel package. This step is nevertheless slow and takes about ~13 seconds per site and CPU on our system.\nAll measurements will be calculated separately for each allele. For single molecule footprinting data, we do this by grouping the reads based on overlapping SNVs, as outlined in Section 7.2. For the ChIP-seq data, we load the read sequences using stackStringsFromBam from the GenomicAlignments package and separate them by allele based on overlapping SNVs. The CTCF ChIP samples correspond to the samples GSM747534, GSM747535 and GSM747536 from Stadler et al. (2011).\n\n\nShow/hide code\n# expand sites to 180 bp windows centered on motif mid\nhits_hetExt &lt;- resize(hits_het, width = 180, fix = \"center\")\n\n# iterate over sites and combine individual results\npd &lt;- do.call(rbind, mclapply(seq_along(hits_hetExt), function(i) {\n    # allocate empty result\n    hetpos1 &lt;- subsetByOverlaps(x = hetpos, ranges = hits_hetExt[i])\n    seqREF &lt;- paste(as.character(hetpos1$REF), collapse = \"\")\n    seqALT &lt;- paste(as.character(hetpos1$ALT), collapse = \"\")\n    seq1 &lt;- getSeq(gnm, hits_hetExt[i])\n    res &lt;- data.frame(locus = as.character(hits_hetExt[i]),\n                      nA = countPattern(\"A\", seq1[[1]], fixed = TRUE),\n                      nCpG = countPattern(\"CG\", seq1[[1]], fixed = TRUE),\n                      motifScoreREF = hits_hetExt$scoreREF[i],\n                      motifScoreALT = hits_hetExt$scoreALT[i],\n                      motifScoreDelta = hits_hetExt$scoreDelta[i],\n                      motifScoreDeltaBinned = hits_het$scoreDeltaBinned[i],\n                      varlabelREF = seqREF,\n                      varlabelALT = seqALT,\n                      CpGmethNumReadsREF = 0,\n                      CpGmethNumReadsALT = 0,\n                      CpGmethNumReadsNA = 0,\n                      CpGfracmodREF = NA,\n                      CpGfracmodALT = NA,\n                      CpGfracmodDelta = NA,\n                      AmethNumReadsREF = 0,\n                      AmethNumReadsALT = 0,\n                      AmethNumReadsNA = 0,\n                      AfracmodREF = NA,\n                      AfracmodALT = NA,\n                      AfracmodDelta = NA,\n                      chipNumReadsREF = 0,\n                      chipNumReadsALT = 0,\n                      chipNumReadsNA = 0,\n                      chipLog2FC = 0\n    )\n    \n    # load read-level data\n    # ... 5mCpG\n    if (res[1, \"nCpG\"] &gt; 0) {\n        seC &lt;- readModBam(bamfiles = bamfilesC,\n                          regions = hits_hetExt[i],\n                          modbase = \"m\", level = \"read\",\n                          sequenceContextWidth = 3, sequenceReference = gnmREF,\n                          variantPositions = hetpos1, \n                          trim = TRUE, BPPARAM = BiocParallel::SerialParam(),\n                          verbose = interactive())\n        if (nrow(seC) &gt; 0) {\n            # ... filter out non-CpGs (in any genome)\n            seC &lt;- filterPositions(seC, filters = \"sequenceContext\",\n                                   sequenceContext = \"NCG\", assayNameNA = \"mod_prob\")\n            if (nrow(seC) &gt; 0) {\n                seC &lt;- addSeqContext(x = seC, sequenceContextWidth = 3,\n                                     sequenceReference = gnmALT)\n                seC &lt;- filterPositions(seC, filters = \"sequenceContext\",\n                                       sequenceContext = \"NCG\", assayNameNA = \"mod_prob\")\n                if (nrow(seC) &gt; 0) {\n                    # cluster by allele\n                    varlabels &lt;- structure(\n                        unlist(lapply(seC$readInfo, \"[[\", \"variant_label\"), use.names = FALSE),\n                        names = unlist(lapply(seC$readInfo, rownames), use.names = FALSE))\n                    dists &lt;- stringdistmatrix(a = c(seqREF, seqALT),\n                                              b = varlabels, method = \"hamming\",\n                                              nthread = 2) / nchar(varlabels[1])\n                    methGroup &lt;- ifelse(colMins(dists) &lt; 0.34,\n                                        c(\"REF\", \"ALT\")[apply(dists, 2, which.min)], NA)\n                    # calculate average modification fraction\n                    modprob &lt;- as.matrix(assay(seC, \"mod_prob\"))\n                    percmeth &lt;- lapply(split(names(varlabels), methGroup), function(rid) {\n                        nmod &lt;- sum(nnavals(modprob[, rid]) &gt;= 0.5)\n                        nvalid &lt;- sum(is_nonna(modprob)[, rid])\n                        nmod / nvalid\n                    })\n                    \n                    # add to `res`\n                    res[1, c(\"CpGmethNumReadsREF\", \"CpGmethNumReadsALT\", \"CpGmethNumReadsNA\",\n                             \"CpGfracmodREF\", \"CpGfracmodALT\", \"CpGfracmodDelta\")] &lt;- c(\n                                 CpGmethNumReadsREF = sum(methGroup == \"REF\", na.rm = TRUE),\n                                 CpGmethNumReadsALT = sum(methGroup == \"ALT\", na.rm = TRUE),\n                                 CpGmethNumReadsNA = sum(is.na(methGroup)),\n                                 CpGfracmodREF = percmeth$REF %||% NA,\n                                 CpGfracmodALT = percmeth$ALT %||% NA,\n                                 CpGfracmodDelta = (percmeth$REF %||% NA) - (percmeth$ALT %||% NA))\n                }\n            }\n        }\n    }\n    \n    # ... 6mA\n    if (res[1, \"nA\"] &gt; 0) {\n        seA &lt;- readModBam(bamfiles = bamfilesA,\n                          regions = hits_hetExt[i],\n                          modbase = \"a\", level = \"read\",\n                          sequenceContextWidth = 1, sequenceReference = gnmREF,\n                          variantPositions = hetpos1, \n                          trim = TRUE, BPPARAM = BiocParallel::SerialParam(),\n                          verbose = interactive())\n        if (nrow(seA) &gt; 0) {\n            # ... filter out non-As (in any genome)\n            seA &lt;- filterPositions(seA, filters = \"sequenceContext\",\n                                   sequenceContext = \"A\", assayNameNA = \"mod_prob\")\n            if (nrow(seA) &gt; 0) {\n                seA &lt;- addSeqContext(x = seA, sequenceContextWidth = 1,\n                                     sequenceReference = gnmALT)\n                seA &lt;- filterPositions(seA, filters = \"sequenceContext\",\n                                       sequenceContext = \"A\", assayNameNA = \"mod_prob\")\n                if (nrow(seA) &gt; 0) {\n                    # cluster by allele\n                    varlabels &lt;- structure(\n                        unlist(lapply(seA$readInfo, \"[[\", \"variant_label\"), use.names = FALSE),\n                        names = unlist(lapply(seA$readInfo, rownames), use.names = FALSE))\n                    dists &lt;- stringdistmatrix(a = c(seqREF, seqALT),\n                                              b = varlabels, method = \"hamming\",\n                                              nthread = 2) / nchar(varlabels[1])\n                    methGroup &lt;- ifelse(colMins(dists) &lt; 0.34,\n                                        c(\"REF\", \"ALT\")[apply(dists, 2, which.min)], NA)\n                    \n                    # calculate average modification fraction\n                    modprob &lt;- as.matrix(assay(seA, \"mod_prob\"))\n                    percmeth &lt;- lapply(split(names(varlabels), methGroup), function(rid) {\n                        nmod &lt;- sum(nnavals(modprob[, rid]) &gt;= 0.5)\n                        nvalid &lt;- sum(is_nonna(modprob)[, rid])\n                        nmod / nvalid\n                    })\n\n                    # add to `res`\n                    res[1, c(\"AmethNumReadsREF\", \"AmethNumReadsALT\", \"AmethNumReadsNA\",\n                             \"AfracmodREF\", \"AfracmodALT\", \"AfracmodDelta\")] &lt;- c(\n                                 AmethNumReadsREF = sum(methGroup == \"REF\", na.rm = TRUE),\n                                 AmethNumReadsALT = sum(methGroup == \"ALT\", na.rm = TRUE),\n                                 AmethNumReadsNA = sum(is.na(methGroup)),\n                                 AfracmodREF = percmeth$REF %||% NA,\n                                 AfracmodALT = percmeth$ALT %||% NA,\n                                 AfracmodDelta = (percmeth$REF %||% NA) - (percmeth$ALT %||% NA))\n                }\n            }\n        }\n    }\n        \n    # ... CTCF ChIP-seq\n    reads &lt;- do.call(c, unname(lapply(chipbam, function(bam1) {\n        stackStringsFromBam(file = bam1, param = unstrand(hits_hetExt[i]), what = \"seq\")\n    })))\n    \n    if (length(reads) &gt; 0) {\n        varlabels &lt;- apply(do.call(cbind, lapply(start(hetpos1) - start(hits_hetExt[i]) + 1, function(pos) {\n            as.character(subseq(x = reads, start = pos, width = 1))\n        })), 1, paste, collapse = \"\")\n        dists &lt;- stringdistmatrix(a = c(seqREF, seqALT),\n                                  b = varlabels, method = \"hamming\",\n                                  nthread = 2)\n        chipGroup &lt;- ifelse(dists[1,] &lt; dists[2,], \"REF\",\n                            ifelse(dists[2,] &lt; dists[1,], \"ALT\", NA))\n    } else {\n        chipGroup &lt;- character(0)\n    }\n    # add to `res`\n    res[1, c(\"chipNumReadsREF\", \"chipNumReadsALT\",\n             \"chipNumReadsNA\", \"chipLog2FC\")] &lt;- c(\n                 chipNumReadsREF = sum(chipGroup == \"REF\", na.rm = TRUE),\n                 chipNumReadsALT = sum(chipGroup == \"ALT\", na.rm = TRUE),\n                 chipNumReadsNA = sum(is.na(chipGroup)),\n                 chipLog2FC = log2((sum(chipGroup == \"REF\", na.rm = TRUE) + 16) /\n                                       (sum(chipGroup == \"ALT\", na.rm = TRUE) + 16)))\n    \n    return(res)\n}, mc.cores = ncpu, mc.preschedule = FALSE))",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html#visualize-differences-between-alleles-at-each-heterozygous-ctcf-site",
    "href": "multiple-modalities.html#visualize-differences-between-alleles-at-each-heterozygous-ctcf-site",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "8.4 Visualize differences between alleles at each heterozygous CTCF site",
    "text": "8.4 Visualize differences between alleles at each heterozygous CTCF site\nWe know that the binding of a transcription factor leads to an increase of local chromatin accessibility, as well as a decrease in local DNA methylation. We thus expect to find clear associations between the allelic changes of these two and CTCF ChIP signals, and also with changes of motif scores that are the underlying cause of allelic differences.\n\n8.4.1 CTCF binding (ChIP) versus accessibility (6mA)\n\n\nShow/hide code\npdsel &lt;- pd |&gt; filter(CpGmethNumReadsREF &gt; 1,\n                      CpGmethNumReadsALT &gt; 1,\n                      chipNumReadsREF + chipNumReadsALT &gt; 5)\n\nggplot(pdsel, mapping = aes(chipLog2FC, AfracmodDelta)) +\n    geom_point(aes(colour = motifScoreDeltaBinned)) +\n    scale_colour_manual(values =  scoreDeltaBinnedCols) +\n    stat_cor(label.x.npc = \"left\") +\n    labs(title = paste0(\"Predicted CTCF sites overlapping heterozygous SNVs (n=\", nrow(pdsel), \")\"),\n         x = \"Change of CTCF binding (log2 ref/alt)\",\n         y = \"Change of accessibility (fraction 6mA, ref - alt)\",\n         colour = \"Change of motif\\nscore (ref - alt)\") +\n    theme_bw() +\n    theme(legend.position = \"inside\",\n          legend.position.inside = c(0.98, 0.02),\n          legend.justification = c(1, 0))\n\n\n\n\n\n\n\n\nFigure 8.3",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html#ctcf-binding-chip-versus-dna-methylation-5mcpg",
    "href": "multiple-modalities.html#ctcf-binding-chip-versus-dna-methylation-5mcpg",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "8.5 CTCF binding (ChIP) versus DNA methylation (5mCpG)",
    "text": "8.5 CTCF binding (ChIP) versus DNA methylation (5mCpG)\n\n\nShow/hide code\npdsel &lt;- pd |&gt; filter(CpGmethNumReadsREF &gt; 1,\n                      CpGmethNumReadsALT &gt; 1,\n                      chipNumReadsREF + chipNumReadsALT &gt; 5)\n\nggplot(pdsel, mapping = aes(chipLog2FC, CpGfracmodDelta)) +\n    geom_point(aes(colour = motifScoreDeltaBinned)) +\n    scale_colour_manual(values = scoreDeltaBinnedCols) +\n    ggpubr::stat_cor(label.x.npc = \"right\", hjust = 1) +\n    labs(title = paste0(\"Predicted CTCF sites overlapping heterozygous SNVs (n=\", nrow(pdsel), \")\"),\n         x = \"Change of CTCF binding (log2 ref/alt)\",\n         y = \"Change of 5mCpG (ref - alt)\",\n         colour = \"Change of motif\\nscore (ref - alt)\") +\n    theme_bw() +\n    theme(legend.position = \"inside\",\n          legend.position.inside = c(0.02, 0.02),\n          legend.justification = c(0, 0))\n\n\n\n\n\n\n\n\nFigure 8.4",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html#session-info",
    "href": "multiple-modalities.html#session-info",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "8.6 Session info",
    "text": "8.6 Session info\n\n\n Click to view session info \n\n\n\nShow/hide code\nsessioninfo::session_info(info = \"packages\")\n\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version   date (UTC) lib source\n abind                                        * 1.4-8     2024-09-12 [1] CRAN (R 4.5.0)\n AnnotationDbi                                  1.70.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n backports                                      1.5.0     2024-05-23 [1] CRAN (R 4.5.0)\n base64enc                                      0.1-3     2015-07-28 [1] CRAN (R 4.5.0)\n Biobase                                      * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocFileCache                                * 2.16.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics                                 * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocIO                                       * 1.18.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocParallel                                   1.42.1    2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings                                   * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n bit                                            4.6.0     2025-03-06 [1] CRAN (R 4.5.0)\n bit64                                          4.6.0-1   2025-01-16 [1] CRAN (R 4.5.0)\n bitops                                         1.0-9     2024-10-03 [1] CRAN (R 4.5.0)\n blob                                           1.2.4     2023-03-17 [1] CRAN (R 4.5.0)\n broom                                          1.0.8     2025-03-28 [1] CRAN (R 4.5.0)\n BSgenome                                     * 1.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0     2025-04-17 [1] Bioconductor\n cachem                                         1.1.0     2024-05-16 [1] CRAN (R 4.5.0)\n car                                            3.1-3     2024-09-27 [1] CRAN (R 4.5.0)\n carData                                        3.0-5     2022-01-06 [1] CRAN (R 4.5.0)\n caTools                                        1.18.3    2024-09-04 [1] CRAN (R 4.5.0)\n checkmate                                      2.3.2     2024-07-29 [1] CRAN (R 4.5.0)\n cli                                            3.6.5     2025-04-23 [1] CRAN (R 4.5.0)\n cluster                                        2.1.8.1   2025-03-12 [2] CRAN (R 4.5.0)\n codetools                                      0.2-20    2024-03-31 [2] CRAN (R 4.5.0)\n colorspace                                     2.1-1     2024-07-26 [1] CRAN (R 4.5.0)\n crayon                                         1.5.3     2024-06-20 [1] CRAN (R 4.5.0)\n curl                                           6.3.0     2025-06-06 [1] CRAN (R 4.5.0)\n data.table                                     1.17.4    2025-05-26 [1] CRAN (R 4.5.0)\n DBI                                            1.2.3     2024-06-02 [1] CRAN (R 4.5.0)\n dbplyr                                       * 2.5.0     2024-03-19 [1] CRAN (R 4.5.0)\n DelayedArray                                   0.34.1    2025-04-17 [1] Bioconductor 3.21 (R 4.5.0)\n dichromat                                      2.0-0.1   2022-05-02 [1] CRAN (R 4.5.0)\n digest                                         0.6.37    2024-08-19 [1] CRAN (R 4.5.0)\n DirichletMultinomial                           1.50.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n dplyr                                        * 1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n evaluate                                       1.0.3     2025-01-10 [1] CRAN (R 4.5.0)\n farver                                         2.1.2     2024-05-13 [1] CRAN (R 4.5.0)\n fastmap                                        1.2.0     2024-05-15 [1] CRAN (R 4.5.0)\n filelock                                       1.0.3     2023-12-11 [1] CRAN (R 4.5.0)\n footprintR                                   * 0.3.5     2025-06-04 [1] Github (fmicompbio/footprintR@612f713)\n forcats                                      * 1.0.0     2023-01-29 [1] CRAN (R 4.5.0)\n foreign                                        0.8-90    2025-03-31 [2] CRAN (R 4.5.0)\n Formula                                        1.2-5     2023-02-24 [1] CRAN (R 4.5.0)\n generics                                     * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb                                 * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomeInfoDbData                               1.2.14    2025-04-17 [1] Bioconductor\n GenomicAlignments                            * 1.44.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicFeatures                                1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n GenomicRanges                                * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggforce                                        0.4.2     2024-02-19 [1] CRAN (R 4.5.0)\n ggplot2                                      * 3.5.2     2025-04-09 [1] CRAN (R 4.5.0)\n ggpubr                                       * 0.6.0     2023-02-10 [1] CRAN (R 4.5.0)\n ggsignif                                       0.6.4     2022-10-13 [1] CRAN (R 4.5.0)\n glue                                           1.8.0     2024-09-30 [1] CRAN (R 4.5.0)\n gridExtra                                      2.3       2017-09-09 [1] CRAN (R 4.5.0)\n gtable                                         0.3.6     2024-10-25 [1] CRAN (R 4.5.0)\n gtools                                         3.9.5     2023-11-20 [1] CRAN (R 4.5.0)\n Hmisc                                        * 5.2-3     2025-03-16 [1] CRAN (R 4.5.0)\n htmlTable                                      2.4.3     2024-07-21 [1] CRAN (R 4.5.0)\n htmltools                                      0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets                                    1.6.4     2023-12-06 [1] CRAN (R 4.5.0)\n httr                                           1.4.7     2023-08-15 [1] CRAN (R 4.5.0)\n IRanges                                      * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n JASPAR2024                                   * 0.99.7    2024-11-13 [1] Bioconductor 3.21 (R 4.5.0)\n jsonlite                                       2.0.0     2025-03-27 [1] CRAN (R 4.5.0)\n KEGGREST                                       1.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n knitr                                          1.50      2025-03-16 [1] CRAN (R 4.5.0)\n labeling                                       0.4.3     2023-08-29 [1] CRAN (R 4.5.0)\n lattice                                        0.22-7    2025-04-02 [1] CRAN (R 4.5.0)\n lifecycle                                      1.0.4     2023-11-07 [1] CRAN (R 4.5.0)\n magrittr                                       2.0.3     2022-03-30 [1] CRAN (R 4.5.0)\n MASS                                           7.3-65    2025-02-28 [2] CRAN (R 4.5.0)\n Matrix                                       * 1.7-3     2025-03-11 [2] CRAN (R 4.5.0)\n MatrixGenerics                               * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats                                  * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n memoise                                        2.0.1     2021-11-26 [1] CRAN (R 4.5.0)\n nnet                                           7.3-20    2025-01-01 [2] CRAN (R 4.5.0)\n patchwork                                    * 1.3.0     2024-09-16 [1] CRAN (R 4.5.0)\n pillar                                         1.10.2    2025-04-05 [1] CRAN (R 4.5.0)\n pkgconfig                                      2.0.3     2019-09-22 [1] CRAN (R 4.5.0)\n png                                            0.1-8     2022-11-29 [1] CRAN (R 4.5.0)\n polyclip                                       1.10-7    2024-07-23 [1] CRAN (R 4.5.0)\n purrr                                          1.0.4     2025-02-05 [1] CRAN (R 4.5.0)\n pwalign                                        1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n R6                                             2.6.1     2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer                                   1.1-3     2022-04-03 [1] CRAN (R 4.5.0)\n Rcpp                                           1.0.14    2025-01-12 [1] CRAN (R 4.5.0)\n RCurl                                          1.98-1.17 2025-03-22 [1] CRAN (R 4.5.0)\n restfulr                                       0.0.15    2022-06-16 [1] CRAN (R 4.5.0)\n rjson                                          0.2.23    2024-09-16 [1] CRAN (R 4.5.0)\n rlang                                          1.1.6     2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown                                      2.29      2024-11-04 [1] CRAN (R 4.5.0)\n rpart                                          4.1.24    2025-01-07 [2] CRAN (R 4.5.0)\n Rsamtools                                    * 2.24.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n RSQLite                                        2.4.1     2025-06-08 [1] CRAN (R 4.5.0)\n rstatix                                        0.7.2     2023-02-01 [1] CRAN (R 4.5.0)\n rstudioapi                                     0.17.1    2024-10-22 [1] CRAN (R 4.5.0)\n rtracklayer                                  * 1.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n S4Arrays                                     * 1.8.1     2025-06-01 [1] Bioconductor 3.21 (R 4.5.0)\n S4Vectors                                    * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n scales                                         1.4.0     2025-04-24 [1] CRAN (R 4.5.0)\n seqLogo                                        1.74.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n sessioninfo                                    1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SparseArray                                  * 1.8.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n stringdist                                   * 0.9.15    2025-01-10 [1] CRAN (R 4.5.0)\n stringi                                        1.8.7     2025-03-27 [1] CRAN (R 4.5.0)\n stringr                                        1.5.1     2023-11-14 [1] CRAN (R 4.5.0)\n SummarizedExperiment                         * 1.38.1    2025-04-30 [1] Bioconductor 3.21 (R 4.5.0)\n TFBSTools                                    * 1.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n TFMPvalue                                      0.0.9     2022-10-21 [1] CRAN (R 4.5.0)\n tibble                                         3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                                          1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect                                     1.2.1     2024-03-11 [1] CRAN (R 4.5.0)\n tweenr                                         2.0.3     2024-02-26 [1] CRAN (R 4.5.0)\n UCSC.utils                                     1.4.0     2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n universalmotif                               * 1.26.2    2025-04-23 [1] Bioconductor 3.21 (R 4.5.0)\n VariantAnnotation                            * 1.54.1    2025-05-11 [1] Bioconductor 3.21 (R 4.5.0)\n vctrs                                          0.6.5     2023-12-01 [1] CRAN (R 4.5.0)\n withr                                          3.0.2     2024-10-28 [1] CRAN (R 4.5.0)\n xfun                                           0.52      2025-04-02 [1] CRAN (R 4.5.0)\n XML                                            3.99-0.18 2025-01-01 [1] CRAN (R 4.5.0)\n XVector                                      * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n yaml                                           2.3.10    2024-07-26 [1] CRAN (R 4.5.0)\n zoo                                            1.8-14    2025-04-10 [1] CRAN (R 4.5.0)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.5-release-foss-2024.05_BioC-3.21-release-foss-2024.05\n [2] /tachyon/groups/gbioinfo/Appz/easybuild/software/R/4.5.0-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\nRauluseviciute, Ieva, Rafael Riudavets-Puig, Romain Blanc-Mathieu, Jaime A Castro-Mondragon, Katalin Ferenc, Vipin Kumar, Roza Berhanu Lemma, et al. 2024. “JASPAR 2024: 20th Anniversary of the Open-Access Database of Transcription Factor Binding Profiles.” Nucleic Acids Res. 52 (D1): D174–82.\n\n\nStadler, Michael B, Rabih Murr, Lukas Burger, Robert Ivanek, Florian Lienert, Anne Schöler, Erik van Nimwegen, et al. 2011. “DNA-binding Factors Shape the Mouse Methylome at Distal Regulatory Regions.” Nature 480 (7378): 490–95.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Li, Heng, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils\nHomer, Gabor Marth, Goncalo Abecasis, Richard Durbin, and 1000 Genome\nProject Data Processing Subgroup. 2009. “The Sequence\nAlignment/Map Format and SAMtools.”\nBioinformatics 25 (16): 2078–79.\n\n\nRauluseviciute, Ieva, Rafael Riudavets-Puig, Romain Blanc-Mathieu, Jaime\nA Castro-Mondragon, Katalin Ferenc, Vipin Kumar, Roza Berhanu Lemma, et\nal. 2024. “JASPAR 2024: 20th Anniversary of the\nOpen-Access Database of Transcription Factor Binding Profiles.”\nNucleic Acids Res. 52 (D1): D174–82.\n\n\nStadler, Michael B, Rabih Murr, Lukas Burger, Robert Ivanek, Florian\nLienert, Anne Schöler, Erik van Nimwegen, et al. 2011. “DNA-binding Factors Shape the Mouse Methylome at\nDistal Regulatory Regions.” Nature 480 (7378): 490–95.\n\n\nValouev, Anton, Steven M. Johnson, Scott D. Boyd, Cheryl L. Smith,\nAndrew Z. Fire, and Arend Sidow. 2011. “Determinants of Nucleosome\nOrganization in Primary Human Cells.” Nature 474 (7352):\n516–20. https://doi.org/10.1038/nature10002.",
    "crumbs": [
      "References"
    ]
  }
]