[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "footprintR book",
    "section": "",
    "text": "Preface\nThis is a Quarto book about footprintR.\n\nThis book is free and licensed under CC BY-SA 4.0\n\nCopyright (c) 2025 Friedrich Miescher Institute for Biomedical Research.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Single-molecule footprinting is a technique used to study protein-DNA interactions, chromatin accessibility, and nucleosome positioning at the level of individual DNA molecules. Unlike bulk footprinting methods, which provide an averaged signal across a population of molecules, single-molecule footprinting captures heterogeneity in DNA-protein interactions and chromatin accessibility.\nThis book covers various tasks for the analysis of single-molecule footprinting data using footprintR:\nChapter 2 describes how to read footprinting data from modBam files and other formats into R. It also introduces how the data is represented in memory.\nChapter 3 shows how to create informative summaries to judge the quality of an experimental dataset, and how low-quality reads can be filtered out from loaded data or from modBam files.\nChapter 4 illustrates the use of plotRegion to visualize read- or summary-level information for a single genomic region, optionally with additional data and annotation tracks.\nChapter 5 describes various nucleosome-related analyses, such as how to measure the average distance between nucleosomes, how to place nucleosomes onto individual reads, or how to quantify nucleosome phasing in a regions.\nChapter 6 introduces scanForHighScoringRegions, a modular framework that can be used to scan (parts of) the genome for regions of interest, for example differentially modified regions or regions containing phased nucleosomes. If you are looking for a “peak finder” for footprinting data, this is the chapter to read.\nChapter 7 describes how to group reads, for example by allele or methylation status using regroupReads, or across multiple genomic regions using getAnchorRegions. The latter is useful to create meta-plots of your data, for example around transcript start sites or transcription factor binding sites.\nChapter 8 illustrates the power of combining multiple data modalities (for example genetic variability, accessibility, endogenous CpG methylation and ChIP data) into an integrated analysis: The allele-specific binding of a transcription factor.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "reading-data.html",
    "href": "reading-data.html",
    "title": "2  Reading data from files",
    "section": "",
    "text": "2.1 Read-level versus summary-level\nTypically, single molecule footprinting data at the single read level is stored in modBam files, which are standard bam files (Li et al. (2009)) that in addition to the usual information on alignments also contain base modifications encoded in the ML and MM tags (see section 1.7 of SAMtags.pdf for details).\nreadModBam reads modBam files and can either keep the data at the level of individual reads or summarize them per genomic position and sample.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#sec-data-representation",
    "href": "reading-data.html#sec-data-representation",
    "title": "2  Reading data from files",
    "section": "2.2 Data representation",
    "text": "2.2 Data representation\nLet’s start by reading individual reads from a modBam file for a small region of the genome:\n\nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286000-39286200\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm,\n    trim = TRUE\n)\nse\n\nclass: RangedSummarizedExperiment \ndim: 201 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(201): chr8:39286000:- chr8:39286001:- ... chr8:39286198:+ chr8:39286199:+\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\n\n\nHere is a scheme that illustrates the internals of se containing read-level data: \nLet’s go through the individual parts. You can see that the data is contained in a RangedSummarizedExperiment object. This is a container that contains one or more assays (here only one assay called mod_prob). Each assay is a matrix-like object and contains the loaded data (here: base modification probabilities of individual reads).\n\nassayNames(se)\n\n[1] \"mod_prob\"\n\n\nThe rows represent genomic positions and the columns represent samples. In our example, we have loaded data from two modBam files corresponding to the two samples \"wt1\" and \"wt2\", thus the object has two columns:\n\nncol(se)\n\n[1] 2\n\ncolnames(se)\n\n[1] \"wt1\" \"wt2\"\n\n\nThe 201 rows correspond to individual base positions, for which at least one modification has been loaded. You can get the genomic coordinates of these positions using rowRanges:\n\nnrow(se)\n\n[1] 201\n\nrowRanges(se)\n\nUnstitchedGPos object with 201 positions and 1 metadata column:\n                  seqnames       pos strand | sequenceContext\n                     &lt;Rle&gt; &lt;integer&gt;  &lt;Rle&gt; |  &lt;DNAStringSet&gt;\n  chr8:39286000:-     chr8  39286000      - |               G\n  chr8:39286001:-     chr8  39286001      - |               A\n  chr8:39286002:+     chr8  39286002      + |               A\n  chr8:39286003:-     chr8  39286003      - |               A\n  chr8:39286004:+     chr8  39286004      + |               A\n              ...      ...       ...    ... .             ...\n  chr8:39286195:+     chr8  39286195      + |               A\n  chr8:39286196:+     chr8  39286196      + |               A\n  chr8:39286197:-     chr8  39286197      - |               A\n  chr8:39286198:+     chr8  39286198      + |               A\n  chr8:39286199:+     chr8  39286199      + |               A\n  -------\n  seqinfo: 61 sequences (1 circular) from mm39 genome\n\n\nThese positions are stranded, as base modifications can be observed on either of the two strands:\n\ntable(strand(se))\n\n\n  +   -   * \n100 101   0 \n\n\nFinally, the individual reads of a sample are stored in the assay, inside the “column” of that sample:\n\nassayNames(se)\n\n[1] \"mod_prob\"\n\nassay(se, \"mod_prob\")\n\nDataFrame with 201 rows and 2 columns\n                         wt1          wt2\n                  &lt;NaMatrix&gt;   &lt;NaMatrix&gt;\nchr8:39286000:- NA:NA:NA:... NA:NA:NA:...\nchr8:39286001:-  0:NA:NA:...   0:NA:0:...\nchr8:39286002:+   NA:0:0:...  NA:0:NA:...\nchr8:39286003:-  0:NA:NA:...   0:NA:0:...\nchr8:39286004:+   NA:0:0:...  NA:0:NA:...\n...                      ...          ...\nchr8:39286195:+  NA:0:NA:...  NA:0:NA:...\nchr8:39286196:+  NA:0:NA:...  NA:0:NA:...\nchr8:39286197:-  0:NA:NA:...   0:NA:0:...\nchr8:39286198:+  NA:0:NA:... NA:NA:NA:...\nchr8:39286199:+  NA:0:NA:... NA:NA:NA:...\n\n\nYou can see that each column is itself an object of type NaMatrix.\n\n# get the NaMatrix with reads of sample wt1\nmp1 &lt;- assay(se, \"mod_prob\")$wt1\nmp1\n\n&lt;201 x 35 NaMatrix&gt; of type \"double\" [nnacount=2368 (34%)]:\n       wt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6 ... wt1-70e9a128-ea64-4c1d-b9e9-44f76a51a780\n  [1,]                                       NA   .                                       NA\n  [2,]                                        0   .                                       NA\n  [3,]                                       NA   .                                       NA\n  [4,]                                        0   .                                       NA\n  [5,]                                       NA   .                                       NA\n   ...                                        .   .                                        .\n[197,]                                       NA   .                                        0\n[198,]                                       NA   .                                        0\n[199,]                                        0   .                                       NA\n[200,]                                       NA   .                                        0\n[201,]                                       NA   .                                        0\n\n\nThe rows in the NaMatrix corresponding to the same genomic positions we have seen above, but the columns correspond to the 35 individual reads. The numeric values correspond to modification probabilities. A value greater than 0.5 or 0.7 is typically considered modified. Many values are NA (missing), either because a read did not overlap a given position, or there was no information about modifications at that position in that read. Storing all these NA values would be a waste of memory, which is avoided in the NaMatrix, which is a special type of sparse matrix from the SparseArray package that only stores non-NA values.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#flattening-read-level-to-summary-level-data",
    "href": "reading-data.html#flattening-read-level-to-summary-level-data",
    "title": "2  Reading data from files",
    "section": "2.3 Flattening read-level to summary-level data",
    "text": "2.3 Flattening read-level to summary-level data\nWe can use flattenReadLevelAssay to go from this read-level to summary-level data:\n\nse_summary &lt;- flattenReadLevelAssay(se)\n\nHere is an illustration of the summary-level data container:  Its dimensions are identical to the original se (positions by samples), however it contains additional assays that do not have the nested structure with individual reads, but are simple matrices:\n\ndim(se_summary)\n\n[1] 201   2\n\nassayNames(se_summary)\n\n[1] \"mod_prob\" \"Nmod\"     \"Nvalid\"   \"FracMod\" \n\nhead(assay(se_summary, \"Nmod\"))\n\n                wt1 wt2\nchr8:39286000:-   0   0\nchr8:39286001:-   0   1\nchr8:39286002:+   0   1\nchr8:39286003:-   1   3\nchr8:39286004:+   0   0\nchr8:39286005:-   0   2\n\n\nBy default, flattenReadLevelAssay keeps the read-level assay (\"mod_prob\") and generates summarized assays with the numbers of modified and total bases (\"Nmod\" and \"Nvalid\"), and the fraction of modified bases per position and sample (“FracMod”`).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#directly-reading-summary-level-data",
    "href": "reading-data.html#directly-reading-summary-level-data",
    "title": "2  Reading data from files",
    "section": "2.4 Directly reading summary-level data",
    "text": "2.4 Directly reading summary-level data\nIf the individual reads are not required, you can directly summarize them while reading, which is faster and eliminates the call to flattenReadLevelAssay. This is achieved by adding the argument level = \"summary\" to the readModBam call:\n\nse_summary_direct &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286000-39286200\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm,\n    trim = TRUE,\n    level = \"summary\"\n)\nse_summary_direct\n\nclass: RangedSummarizedExperiment \ndim: 201 2 \nmetadata(1): readLevelData\nassays(3): Nmod Nvalid FracMod\nrownames(201): chr8:39286000:- chr8:39286001:- ... chr8:39286198:+ chr8:39286199:+\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(2): sample modbase\n\nidentical(assay(se_summary, \"FracMod\"),\n          assay(se_summary_direct, \"FracMod\"))\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#sec-read-sampling",
    "href": "reading-data.html#sec-read-sampling",
    "title": "2  Reading data from files",
    "section": "2.5 Read sampling",
    "text": "2.5 Read sampling\nIn some cases, we may want to read a random set of reads from a modBam file, for example to calculate average modification rates or quality statistics. In such cases, reading data by genomic position is not optimal.\nreadModBam provides a special reading mode for this, controlled by the arguments nAlnsToSample and seqnamesToSampleFrom:\n\nse_sampled &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm,\n    nAlnsToSample = 20,\n    seqnamesToSampleFrom = \"chr19\"\n)\nse_sampled\n\nclass: RangedSummarizedExperiment \ndim: 61348 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(61348): chr19:6119863:- chr19:6119864:- ... chr19:60772501:+ chr19:60772504:+\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\n\nse_sampled$n_reads\n\n[1] 19 18\n\n\nFor details of how to make the sampling reproducible even when using multiple parallel threads, and why you might get a lower number of sampled reads than requested, please look at the documenation of readModBam.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "reading-data.html#reading-from-other-file-types",
    "href": "reading-data.html#reading-from-other-file-types",
    "title": "2  Reading data from files",
    "section": "2.6 Reading from other file types",
    "text": "2.6 Reading from other file types\nIn addition to reading from modBam files, you can also read (summary-level) data from bedMethyl files using readBedMethyl, or from tabular files created by modkit using readModkitExtract. The arguments of these reader functions are largely similar to the ones used for reading modBam files.\n\n# read from bedMethyl\nbmfile &lt;- system.file(\"extdata\", \"modkit_pileup_1.bed.gz\",\n                      package = \"footprintR\")\nse_bedmethyl &lt;- readBedMethyl(\n    fnames = bmfile,\n    modbase = \"m\",\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 3, \n    sequenceReference = gnm\n)\nse_bedmethyl\n\nclass: RangedSummarizedExperiment \ndim: 10000 1 \nmetadata(1): readLevelData\nassays(2): Nmod Nvalid\nrownames: NULL\nrowData names(1): sequenceContext\ncolnames(1): s1\ncolData names(2): sample modbase\n\n# read from a tabular file created by modkit\nextrfile &lt;- system.file(\"extdata\", \"modkit_extract_rc_5mC_1.tsv.gz\",\n                        package = \"footprintR\")\nse_modkit &lt;- readModkitExtract(\n    fnames = extrfile,\n    modbase = \"m\",\n    filter = NULL,\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 3, \n    sequenceReference = gnm\n)\nse_modkit\n\nclass: RangedSummarizedExperiment \ndim: 6432 1 \nmetadata(3): modkit_threshold filter_threshold readLevelData\nassays(1): mod_prob\nrownames(6432): chr1:6928983:- chr1:6928995:- ... chr1:6949455:+ chr1:6949461:+\nrowData names(1): sequenceContext\ncolnames(1): s1\ncolData names(2): sample modbase\n\n\n\n\n\n\nLi, Heng, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils Homer, Gabor Marth, Goncalo Abecasis, Richard Durbin, and 1000 Genome Project Data Processing Subgroup. 2009. “The Sequence Alignment/Map Format and SAMtools.” Bioinformatics 25 (16): 2078–79.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading data from files</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html",
    "href": "qc-filtering.html",
    "title": "3  Quality control and filtering",
    "section": "",
    "text": "3.1 Creating a QC report",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html#position-filtering",
    "href": "qc-filtering.html#position-filtering",
    "title": "3  Quality control and filtering",
    "section": "3.2 Position filtering",
    "text": "3.2 Position filtering\nTo illustrate the position-level filtering of imported data, we first read 6mA data from a small genomic region for two samples. We add the sequence context (a single nucleotide) to be able to use this information as a basis for filtering.\n\nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286301-39287100\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\nse\n\nclass: RangedSummarizedExperiment \ndim: 21456 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(21456): chr8:39269571:- chr8:39269579:- ... chr8:39303298:- chr8:39303300:-\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\n\n\nThe sequence information is stored in the rowData of se:\n\nrowData(se)\n\nDataFrame with 21456 rows and 1 column\n                sequenceContext\n                 &lt;DNAStringSet&gt;\nchr8:39269571:-               A\nchr8:39269579:-               A\nchr8:39269588:-               A\nchr8:39269589:-               A\nchr8:39269612:-               A\n...                         ...\nchr8:39303283:-               A\nchr8:39303284:-               A\nchr8:39303297:-               A\nchr8:39303298:-               C\nchr8:39303300:-               A\n\n\nPosition filtering can now be performed with the filterPositions function. The filters argument define which filters to apply, as well as the order (sequence context, coverage, removal of positions without non-NA values). Here, we retain only positions where the genome sequence is an A, and the coverage (the number of overlapping reads) is at least five. The assayNameCov argument indicates which assay will be used to define the coverage. If this is a read-level assay (like here), coverage will first be calculated using flattenReadLevelAssay. For more precise control, the summary assay can also be manually calculated and added to se beforehand, and specified in assayNameCov.\n\nsefilt &lt;- filterPositions(\n    se, \n    filters = c(\"sequenceContext\", \"coverage\", \"all.na\"),\n    sequenceContext = \"A\",\n    assayNameCov = \"mod_prob\",\n    minCov = 5\n)\nsefilt\n\nclass: RangedSummarizedExperiment \ndim: 10957 2 \nmetadata(3): readLevelData variantPositions filteredOutReads\nassays(1): mod_prob\nrownames(10957): chr8:39279307:- chr8:39279308:- ... chr8:39298917:- chr8:39298921:-\nrowData names(1): sequenceContext\ncolnames(2): wt1 wt2\ncolData names(4): sample modbase n_reads readInfo\n\n\nIn this case, the position filtering reduced the number of unique positions from 21456 to 10957 by 48.9%. However, the number of non-NA values in the matrix is only reduced from 165914 to 148815 (10.3%), confirming that the filtered-out positions are generally covered only by few reads.\nIn addition to explicit filtering like here, many other functions in footprintR allow built-in filtering for a specific sequence context.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html#read-filtering",
    "href": "qc-filtering.html#read-filtering",
    "title": "3  Quality control and filtering",
    "section": "3.3 Read filtering",
    "text": "3.3 Read filtering\n\n3.3.1 Filtering a SummarizedExperiment object\nIn addition to the position filtering illustrated above, footprintR also provides functionality for calculating read-level quality scores and filtering out reads with low quality. The calculation of the quality scores is done using the addReadStats function, and the filtering is performed via the filterReads function.\n\n# Calculate read statistics\nsefilt &lt;- addReadStats(\n    sefilt, \n    name = \"QC\"\n)\n\n# The calculated read statistics are stored in the colData\ncolData(sefilt)\n\nDataFrame with 2 rows and 5 columns\n         sample     modbase   n_reads                                                                    readInfo\n    &lt;character&gt; &lt;character&gt; &lt;integer&gt;                                                                      &lt;List&gt;\nwt1         wt1           a        34   20.3297:17986:17872:...,19.7905:10469:10421:...,13.2784:7876:7761:...,...\nwt2         wt2           a        41 14.1235:22453:22149:...,15.9814:15617:15460:...,14.3505:12359:12212:...,...\n                                                                                                        QC\n                                                                                                    &lt;List&gt;\nwt1 0.0618421:0.0455829:0.967676:...,0.0545563:0.0386562:0.971495:...,0.1317097:0.1049275:0.931608:...,...\nwt2       0.195971:0.186199:0.931852:...,0.169650:0.156304:0.944134:...,0.189312:0.176095:0.940588:...,...\n\nsefilt$QC$wt1\n\nDataFrame with 34 rows and 11 columns\n                                         MeanModProb   FracMod  MeanConf MeanConfUnm MeanConfMod FracLowConf IQRModProb\n                                           &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;   &lt;numeric&gt;   &lt;numeric&gt;   &lt;numeric&gt;  &lt;numeric&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6   0.0618421 0.0455829  0.967676    0.974548    0.823787   0.0367084  0.0000000\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47   0.0545563 0.0386562  0.971495    0.976905    0.836961   0.0299126  0.0000000\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897   0.1317097 0.1049275  0.931608    0.946834    0.801720   0.0765217  0.1113281\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364   0.1315284 0.1202325  0.953554    0.967183    0.853822   0.0584817  0.0683594\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f   0.1023139 0.0596330  0.923058    0.936395    0.712730   0.0880734  0.1152344\n...                                              ...       ...       ...         ...         ...         ...        ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7   0.0596196 0.0461133  0.970019    0.977205    0.821373   0.0342556  0.0000000\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619   0.0958030 0.0778281  0.954483    0.965575    0.823061   0.0565611  0.0488281\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641   0.1107278 0.0993151  0.966969    0.975328    0.891164   0.0376712  0.0000000\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379   0.0394939 0.0268914  0.978357    0.982404    0.831901   0.0190032  0.0000000\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b   0.1471507 0.1341176  0.960524    0.969679    0.901419   0.0376471  0.0761719\n                                         sdModProb Lag1DModProb                               ACModProb\n                                         &lt;numeric&gt;    &lt;numeric&gt;                                  &lt;list&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6  0.185359    0.0573043       0.0749726,0.0161444,0.0133524,...\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47  0.173306    0.0598527  0.02945337,-0.00588547,-0.01550006,...\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897  0.254609    0.1531323     0.0319851,-0.0100365, 0.0148677,...\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364  0.284379    0.1417151  0.02581876, 0.03198559,-0.00294165,...\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f  0.188172    0.1021719       0.0068839,0.0300003,0.0344642,...\n...                                            ...          ...                                     ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7  0.184892    0.0676626  0.01516679, 0.00209322,-0.00613638,...\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619  0.232541    0.1095518       0.0832970,0.0437754,0.0433326,...\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641  0.272549    0.1233933    -0.0505126,-0.0494200,-0.0163033,...\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379  0.146425    0.0401722 -0.00921144, 0.01132777, 0.00043232,...\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b  0.310255    0.1415094    -0.0303490,-0.0681595,-0.0348878,...\n                                                                         PACModProb\n                                                                             &lt;list&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6    -0.05628108,-0.00550086, 0.00561907,...\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47       -0.0248721,-0.0272212,-0.0196893,...\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897       -0.0318656, 0.0126163, 0.0145030,...\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364  0.000585163,-0.035027495,-0.036536268,...\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f          0.0257367,0.0221382,0.0161219,...\n...                                                                             ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7       -0.0148931,-0.0104126,-0.0223420,...\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619 -0.023189216, 0.000722367,-0.018193456,...\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641       -0.0239780, 0.0296459,-0.0448544,...\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379        0.0176851,-0.0107225, 0.0719348,...\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b       -0.0609389, 0.0117622,-0.0752276,...\n\n# In addition, we can filter based on the read info columns added by readModBam\nsefilt$readInfo$wt1\n\nDataFrame with 34 rows and 5 columns\n                                            qscore read_length aligned_length variant_label aligned_fraction\n                                         &lt;numeric&gt;   &lt;integer&gt;      &lt;integer&gt;   &lt;character&gt;        &lt;numeric&gt;\nwt1-d914fb79-7d7a-4a67-bb98-5d1168b057b6   20.3297       17986          17872            NA         0.993662\nwt1-91aeb981-e093-449d-a6c1-63ad824c8d47   19.7905       10469          10421            NA         0.995415\nwt1-e3b1cc8a-cde6-4745-9f49-310e68242897   13.2784        7876           7761            NA         0.985399\nwt1-c5dbb0ee-edfa-4f52-b48b-ac34f7251364   16.2577        9694           9585            NA         0.988756\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f   11.2134       14639          14236            NA         0.972471\n...                                            ...         ...            ...           ...              ...\nwt1-b47f7f9e-623a-4f68-ac0c-905b212f39d7   17.4973       11977           5871            NA         0.490190\nwt1-7f8eda94-bebd-4ccb-af87-c3e7d65be619   15.7355        9155           5711            NA         0.623812\nwt1-27f1bc2e-7b63-49b2-a773-0163334f7641   18.1292        9097           6047            NA         0.664725\nwt1-c32080be-75b0-4923-87dd-41a7cb69d379   22.4457        7597           7577            NA         0.997367\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b   16.8056        4182           2419            NA         0.578431\n\n# Visualize the read statistics to set appropriate filter thresholds\nplotReadStats(\n    sefilt\n)\n\n\n\n\n\n\n\n# Perform filtering\nsefilt &lt;- filterReads(\n    sefilt,\n    minQscore = 13,\n    maxFracLowConf = 0.1,\n    minAlignedLength = 5000, \n    removeAllNApos = TRUE\n)\n\nFiltering statistics are stored in the metadata of the filtered SummarizedExperiment object.\n\nmetadata(sefilt)$filteredOutReads\n\n$wt1\n&lt;9 x 7 SparseMatrix&gt; of type \"logical\" [nzcount=10 (16%)]:\n                                                  Qscore         Entropy     FracLowConf ... AlignedFraction\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f            TRUE           FALSE           FALSE   .           FALSE\nwt1-1c916f3a-030c-4c18-9f76-408840e6a3fa            TRUE           FALSE           FALSE   .           FALSE\nwt1-2f9885e3-91d5-4753-961d-439d64fbd301            TRUE           FALSE           FALSE   .           FALSE\nwt1-840df614-693f-40f5-9b35-7495eac426f1           FALSE           FALSE           FALSE   .           FALSE\nwt1-51e19b4b-6baa-4982-88f3-a16a9fad78c6           FALSE           FALSE           FALSE   .           FALSE\nwt1-419d45a8-6e9e-41cc-ae32-9105049b8cd7            TRUE           FALSE           FALSE   .           FALSE\nwt1-c1eef755-3d3f-4f33-b87a-d896ec1a26cc           FALSE           FALSE           FALSE   .           FALSE\nwt1-d87a7efd-367f-42f6-b9af-e112610e945b            TRUE           FALSE           FALSE   .           FALSE\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b           FALSE           FALSE           FALSE   .           FALSE\n                                                   AllNA\nwt1-e11adb8a-0c3d-45cf-9633-d67780a4185f           FALSE\nwt1-1c916f3a-030c-4c18-9f76-408840e6a3fa           FALSE\nwt1-2f9885e3-91d5-4753-961d-439d64fbd301           FALSE\nwt1-840df614-693f-40f5-9b35-7495eac426f1           FALSE\nwt1-51e19b4b-6baa-4982-88f3-a16a9fad78c6           FALSE\nwt1-419d45a8-6e9e-41cc-ae32-9105049b8cd7           FALSE\nwt1-c1eef755-3d3f-4f33-b87a-d896ec1a26cc           FALSE\nwt1-d87a7efd-367f-42f6-b9af-e112610e945b           FALSE\nwt1-6a7643fc-b95e-49ec-baa8-86fe294e473b           FALSE\n\n$wt2\n&lt;12 x 7 SparseMatrix&gt; of type \"logical\" [nzcount=16 (19%)]:\n                                                  Qscore         Entropy     FracLowConf ... AlignedFraction\nwt2-b58992e1-d311-49d7-bf22-81fd390687b5            TRUE           FALSE           FALSE   .           FALSE\nwt2-e145db43-4658-4dcc-8f58-78fb09544770            TRUE           FALSE            TRUE   .           FALSE\nwt2-eac97b86-e3fc-4d19-8a02-08bd861077b5            TRUE           FALSE           FALSE   .           FALSE\nwt2-e06432c5-189d-4c1c-8a5b-025c2d68fee5            TRUE           FALSE            TRUE   .           FALSE\nwt2-5a2f30be-48c9-4b0a-8ab1-83d54c71ef56           FALSE           FALSE           FALSE   .           FALSE\n                                     ...               .               .               .   .               .\nwt2-fac12814-a86d-4d07-9596-d9ea4943580e           FALSE           FALSE           FALSE   .           FALSE\nwt2-f77f5ae9-dd3a-4e08-a390-7e80868433a7            TRUE           FALSE            TRUE   .           FALSE\nwt2-fda332ae-02de-4391-9cff-620c1ae8799f           FALSE           FALSE           FALSE   .           FALSE\nwt2-b6efe1fe-f2b9-4f69-bb61-f4a741969a52           FALSE           FALSE            TRUE   .           FALSE\nwt2-d0b3f6f8-c5d3-477e-b4c4-02dcd4602767           FALSE           FALSE           FALSE   .           FALSE\n                                                   AllNA\nwt2-b58992e1-d311-49d7-bf22-81fd390687b5           FALSE\nwt2-e145db43-4658-4dcc-8f58-78fb09544770           FALSE\nwt2-eac97b86-e3fc-4d19-8a02-08bd861077b5           FALSE\nwt2-e06432c5-189d-4c1c-8a5b-025c2d68fee5           FALSE\nwt2-5a2f30be-48c9-4b0a-8ab1-83d54c71ef56           FALSE\n                                     ...               .\nwt2-fac12814-a86d-4d07-9596-d9ea4943580e           FALSE\nwt2-f77f5ae9-dd3a-4e08-a390-7e80868433a7           FALSE\nwt2-fda332ae-02de-4391-9cff-620c1ae8799f           FALSE\nwt2-b6efe1fe-f2b9-4f69-bb61-f4a741969a52           FALSE\nwt2-d0b3f6f8-c5d3-477e-b4c4-02dcd4602767           FALSE\n\n\n\n\n3.3.2 Filtering a modBam file",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "qc-filtering.html#session-info",
    "href": "qc-filtering.html#session-info",
    "title": "3  Quality control and filtering",
    "section": "3.4 Session info",
    "text": "3.4 Session info\n\n\n Click to view session info \n\n\nsessioninfo::session_info(info = \"packages\")\n\n═ Session info ═══════════════════════════════════════════════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n package                                      * version    date (UTC) lib source\n abind                                        * 1.4-8      2024-09-12 [1] CRAN (R 4.4.2)\n Biobase                                      * 2.66.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocGenerics                                 * 0.52.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocIO                                       * 1.16.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocParallel                                 * 1.40.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n Biostrings                                   * 2.74.1     2024-12-16 [1] Bioconductor 3.20 (R 4.4.2)\n bitops                                         1.0-9      2024-10-03 [1] CRAN (R 4.4.2)\n BSgenome                                     * 1.74.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0      2024-11-01 [1] Bioconductor\n cli                                            3.6.4      2025-02-13 [1] CRAN (R 4.4.2)\n codetools                                      0.2-20     2024-03-31 [2] CRAN (R 4.4.2)\n crayon                                         1.5.3      2024-06-20 [1] CRAN (R 4.4.2)\n curl                                           6.2.2      2025-03-24 [1] CRAN (R 4.4.2)\n data.table                                     1.17.0     2025-02-22 [1] CRAN (R 4.4.2)\n DelayedArray                                   0.32.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n dichromat                                      2.0-0.1    2022-05-02 [1] CRAN (R 4.4.2)\n digest                                         0.6.37     2024-08-19 [1] CRAN (R 4.4.2)\n dplyr                                          1.1.4      2023-11-17 [1] CRAN (R 4.4.2)\n evaluate                                       1.0.3      2025-01-10 [1] CRAN (R 4.4.2)\n farver                                         2.1.2      2024-05-13 [1] CRAN (R 4.4.2)\n fastmap                                        1.2.0      2024-05-15 [1] CRAN (R 4.4.2)\n footprintR                                   * 0.3.2      2025-03-26 [1] Github (fmicompbio/footprintR@04d9c8f)\n generics                                       0.1.3      2022-07-05 [1] CRAN (R 4.4.2)\n GenomeInfoDb                                 * 1.42.3     2025-01-27 [1] Bioconductor 3.20 (R 4.4.2)\n GenomeInfoDbData                               1.2.13     2024-10-31 [1] Bioconductor\n GenomicAlignments                              1.42.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n GenomicRanges                                * 1.58.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n ggforce                                        0.4.2      2024-02-19 [1] CRAN (R 4.4.2)\n ggplot2                                        3.5.1      2024-04-23 [1] CRAN (R 4.4.2)\n glue                                           1.8.0      2024-09-30 [1] CRAN (R 4.4.2)\n gtable                                         0.3.6      2024-10-25 [1] CRAN (R 4.4.2)\n htmltools                                      0.5.8.1    2024-04-04 [1] CRAN (R 4.4.2)\n htmlwidgets                                    1.6.4      2023-12-06 [1] CRAN (R 4.4.2)\n httr                                           1.4.7      2023-08-15 [1] CRAN (R 4.4.2)\n IRanges                                      * 2.40.1     2024-12-05 [1] Bioconductor 3.20 (R 4.4.2)\n jsonlite                                       1.9.1      2025-03-03 [1] CRAN (R 4.4.2)\n knitr                                          1.50       2025-03-16 [1] CRAN (R 4.4.2)\n labeling                                       0.4.3      2023-08-29 [1] CRAN (R 4.4.2)\n lattice                                        0.22-6     2024-03-20 [2] CRAN (R 4.4.2)\n lifecycle                                      1.0.4      2023-11-07 [1] CRAN (R 4.4.2)\n magrittr                                       2.0.3      2022-03-30 [1] CRAN (R 4.4.2)\n MASS                                           7.3-61     2024-06-13 [2] CRAN (R 4.4.2)\n Matrix                                       * 1.7-1      2024-10-18 [2] CRAN (R 4.4.2)\n MatrixGenerics                               * 1.18.1     2025-01-09 [1] Bioconductor 3.20 (R 4.4.2)\n matrixStats                                  * 1.5.0      2025-01-07 [1] CRAN (R 4.4.2)\n patchwork                                      1.3.0      2024-09-16 [1] CRAN (R 4.4.2)\n pillar                                         1.10.1     2025-01-07 [1] CRAN (R 4.4.2)\n pkgconfig                                      2.0.3      2019-09-22 [1] CRAN (R 4.4.2)\n polyclip                                       1.10-7     2024-07-23 [1] CRAN (R 4.4.2)\n purrr                                          1.0.4      2025-02-05 [1] CRAN (R 4.4.2)\n R6                                             2.6.1      2025-02-15 [1] CRAN (R 4.4.2)\n RColorBrewer                                   1.1-3      2022-04-03 [1] CRAN (R 4.4.2)\n Rcpp                                           1.0.14     2025-01-12 [1] CRAN (R 4.4.2)\n RCurl                                          1.98-1.17  2025-03-22 [1] CRAN (R 4.4.2)\n restfulr                                       0.0.15     2022-06-16 [1] CRAN (R 4.4.2)\n rjson                                          0.2.23     2024-09-16 [1] CRAN (R 4.4.2)\n rlang                                          1.1.5      2025-01-17 [1] CRAN (R 4.4.2)\n rmarkdown                                      2.29       2024-11-04 [1] CRAN (R 4.4.2)\n Rsamtools                                      2.22.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n rstudioapi                                     0.17.1     2024-10-22 [1] CRAN (R 4.4.2)\n rtracklayer                                  * 1.66.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n S4Arrays                                     * 1.6.0      2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n S4Vectors                                    * 0.44.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n scales                                         1.3.0.9000 2025-01-29 [1] Github (r-lib/scales@ee03582)\n sessioninfo                                    1.2.3      2025-02-05 [1] CRAN (R 4.4.2)\n SparseArray                                  * 1.6.2      2025-02-20 [1] Bioconductor 3.20 (R 4.4.2)\n SummarizedExperiment                         * 1.36.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n tibble                                         3.2.1      2023-03-20 [1] CRAN (R 4.4.2)\n tidyr                                          1.3.1      2024-01-24 [1] CRAN (R 4.4.2)\n tidyselect                                     1.2.1      2024-03-11 [1] CRAN (R 4.4.2)\n tweenr                                         2.0.3      2024-02-26 [1] CRAN (R 4.4.2)\n UCSC.utils                                     1.2.0      2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n vctrs                                          0.6.5      2023-12-01 [1] CRAN (R 4.4.2)\n withr                                          3.0.2      2024-10-28 [1] CRAN (R 4.4.2)\n xfun                                           0.51       2025-02-19 [1] CRAN (R 4.4.2)\n XML                                            3.99-0.18  2025-01-01 [1] CRAN (R 4.4.2)\n XVector                                      * 0.46.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n yaml                                           2.3.10     2024-07-26 [1] CRAN (R 4.4.2)\n zlibbioc                                       1.52.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n zoo                                            1.8-13     2025-02-22 [1] CRAN (R 4.4.2)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.4-release-foss-2024.05_BioC-3.20-release-foss-2024.05\n [2] /tungstenfs/groups/gbioinfo/Appz/easybuild/software/R/4.4.2-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quality control and filtering</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html",
    "href": "visualize-regions.html",
    "title": "4  Visualizing regions with plotRegion",
    "section": "",
    "text": "4.1 Preparation\nWe start by loading the required packages. In addition to the software package, we load a BSgenome and TxDb object providing the mouse genome sequence and transcript annotation.\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\nTxDbName &lt;- \"TxDb.Mmusculus.GENCODE.GRCm39.gencodeM34\"\n\nlibrary(footprintR)\nlibrary(patchwork)\nlibrary(GenomicRanges)\nlibrary(BSgenomeName, character.only = TRUE)\nlibrary(TxDbName, character.only = TRUE)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\ngenome(gnm) &lt;- \"mm39\"\n\n# Load TxDb and create GRangesList with transcript annotations\ntxdb &lt;- get(TxDbName)\nebt &lt;- exonsBy(txdb, \"tx\", use.names = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#read-data",
    "href": "visualize-regions.html#read-data",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.2 Read data",
    "text": "4.2 Read data\nTo exemplify the plotting capabilities of plotRegion, we use modBam files from two wild-type samples, for which 6mA modification calling has been performed. We use the readModBam function to read data from an 800-bp region on chromosome 8 and store it in a SummarizedExperiment object. For more information about reading data with footprintR, see Chapter 2.\n\n# Read data \nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39286301-39287100\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#read-level-plots",
    "href": "visualize-regions.html#read-level-plots",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.3 Read-level plots",
    "text": "4.3 Read-level plots\nRead-level plots can be generated using either the Heatmap or the Lollipop track type, assuming that there is at least one assay with read-level data present in the provided SummarizedExperiment object. The heatmap visualizes each base with a modification call as a filled rectangle, with optional interpolation between observations. The lollipop plot visualizes each base with a modification call as a filled circle. In both cases, the fill color represents the recorded modification probability of the base. For the read-level plot tracks, the trackData argument specifies the name of the (read-level) assay that should be displayed.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286600-39286800\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\")\n    )\n)\n\n\n\n\n\n\n\n\nIn the current plot, reads on both strands are visualized, and can be distinguished based on the position of the modified bases (the As). It is possible to visualize only the reads on one strand, by providing a stranded region to plotRegion.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286600-39286800:+\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\")\n    )\n)\n\n\n\n\n\n\n\n\nMoreover, we can limit the display to only positions where the annotated genome has a given sequence (here, an A). This is often helpful to minimize the impact of base calling errors.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286600-39286800:+\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\")\n    ), \n    sequenceContext = \"A\"\n)\n\n\n\n\n\n\n\n\nEach plot function comes with a set of arguments that can be used to control the way that data is displayed in the track (see the documentation of plotRegion for the full list). For example, we can add interpolation to our heatmap, disable the automatic clustering of the reads, and add custom track and legend titles. For the lollipop plot, we can similarly change the size of the circles and the linewidth of the circle outline.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286600-39286800\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\"\n)\n\n\n\n\n\n\n\n\nBy default, the x-axis of the plots represent genomic coordinates. In some cases (especially if the modified bases are unevenly distributed), the plot may be easier to read if only the modified bases are displayed, evenly spaced along the x-axis. This can be achieved by setting modbaseSpace = TRUE in plotRegion.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286600-39286800\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = FALSE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\",\n    modbaseSpace = TRUE\n)\n\n\n\n\n\n\n\n\nAnother alternative is to anchor the x-axis at a given genomic position, and display the coordinates as distances from this anchor point. This is achieved by setting the referenceCoordinate argument to the numeric position that should be used as the anchor. Note how the x-axis title changes to reflect the current coordinate system.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286600-39286800\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, trackTitle = \"Heatmap\",\n             legendTitle = \"6mA\"),\n        list(trackType = \"Lollipop\", trackData = \"mod_prob\",\n             orderReads = NULL, trackTitle = \"Lollipop\",\n             legendTitle = \"6mA\", size = 2, stroke = 0.1)\n    ), \n    sequenceContext = \"A\",\n    referenceCoordinate = 39286700\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#summary-level-plots",
    "href": "visualize-regions.html#summary-level-plots",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.4 Summary-level plots",
    "text": "4.4 Summary-level plots\nIn addition to read-level plots, plotRegion can also display summary-level data (a single value per genomic position and sample), if they are present in the SummarizedExperiment object. These values can be displayed as individual points, and/or with a smooth curve. Summary-level assays can be generated from read-level values using, e.g., the flattenReadLevelAssay function.\n\n# Flatten read-level assay\nse &lt;- flattenReadLevelAssay(\n    se, \n    assayName = \"mod_prob\",\n    statistics = c(\"Nmod\", \"Nvalid\", \"FracMod\")\n)\n\n# Add summary-level track\nplotRegion(\n    se, \n    region = as(\"chr8:39286300-39287100\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"Smooth\", trackData = \"FracMod\")\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1))\n\n\n\n\n\n\n\n\nIn an analogous way to the read-level plots, we can control the display of summary information using the arguments to PlotSummaryPointSmooth. For example, we can change the smoothing function and the degree of smoothing. We can also add the individual points (summary values for individual positions) to the summary plot.\n\n# Add summary-level plot\nplotRegion(\n    se, \n    region = as(\"chr8:39286300-39287100\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1))\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#highlight-regions",
    "href": "visualize-regions.html#highlight-regions",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.5 Highlight regions",
    "text": "4.5 Highlight regions\nSometimes it is helpful to be able to highlight specific genomic regions in the plots. These could be, for example, regions that have been identified as harboring an interesting signal. In plotRegion, this can be achieved via the highlightRegions argument to the respective tracks. The input provided to this argument should be a GRanges object.\n\n# Define regions to highlight\nreg_to_highlight &lt;- GRanges(\n    seqnames = \"chr8\",\n    ranges = IRanges(\n        start = c(39286800, 39286950),\n        end = c(39286900, 39287000)\n    )\n)\n\nplotRegion(\n    se, \n    region = as(\"chr8:39286300-39287100\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1),\n             highlightRegions = reg_to_highlight)\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#annotation-tracks",
    "href": "visualize-regions.html#annotation-tracks",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.6 Annotation tracks",
    "text": "4.6 Annotation tracks\nTo further relate the observed data to existing annotations, plotRegion also allows the user to add one or several tracks representing genomic regions (e.g., gene models). Here, we exemplify how to generate such a track to visualize annotated transcripts in the displayed region.\n\n# Read data from a different region than above (as the previous one does not \n# overlap annotated genes)\nse &lt;- readModBam(\n    bamfiles = c(wt1 = \"data/mESC_wt_6mA_rep1.bam\",\n                 wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = \"chr8:39126917-39128220\", \n    level = \"quickread\", \n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\nse &lt;- flattenReadLevelAssay(\n    se, \n    assayName = \"mod_prob\",\n    statistics = c(\"Nmod\", \"Nvalid\", \"FracMod\")\n)\n\nplotRegion(\n    se, \n    region = as(\"chr8:39126917-39128220\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"GenomicRegion\", \n             trackData = subsetByOverlaps(ebt, as(\"chr8:39126917-39128220\", \"GRanges\"))),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1))\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1, 1))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#bigwig-tracks",
    "href": "visualize-regions.html#bigwig-tracks",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.7 BigWig tracks",
    "text": "4.7 BigWig tracks\nFinally, plotRegion allows the user to include tracks defined by arbitrary BigWig files. Here, we illustrate this by adding a track containing the coverage obtained from a CTCF ChIP-seq experiment. We also modify the colors used to display the summary-level data.\n\nplotRegion(\n    se, \n    region = as(\"chr8:39126917-39128220\", \"GRanges\"), \n    tracks = list(\n        list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n             interpolate = TRUE, orderReads = NULL, \n             legendTitle = \"6mA\"),\n        list(trackType = \"GenomicRegion\", \n             trackData = subsetByOverlaps(ebt, as(\"chr8:39126917-39128220\", \"GRanges\"))),\n        list(trackType = \"BigWig\", trackData = c(wt = \"data/mESC_wt_CTCF_ChIP_rep1.bw\"),\n             yAxisLabel = \"CTCF\", showLegend = FALSE,\n             colors = c(wt = \"forestgreen\")),\n        list(trackType = \"PointSmooth\", trackData = \"FracMod\", \n             arglistPoint = list(size = 1, alpha = 0.25),\n             smoothMethod = \"rollingMean\", windowSize = 15,\n             arglistSmooth = list(linewidth = 1),\n             colors = c(wt1 = \"steelblue\", wt2 = \"firebrick2\"))\n    ), \n    sequenceContext = \"A\"\n) + \n    plot_layout(heights = c(2, 1, 0.5, 1))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "visualize-regions.html#session-info",
    "href": "visualize-regions.html#session-info",
    "title": "4  Visualizing regions with plotRegion",
    "section": "4.8 Session info",
    "text": "4.8 Session info\n\n\n Click to view session info \n\n\nsessioninfo::session_info(info = \"packages\")\n\n═ Session info ═══════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────\n package                                      * version    date (UTC) lib source\n abind                                          1.4-8      2024-09-12 [1] CRAN (R 4.4.2)\n AnnotationDbi                                * 1.68.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n Biobase                                      * 2.66.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocGenerics                                 * 0.52.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocIO                                       * 1.16.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocParallel                                 * 1.40.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n Biostrings                                   * 2.74.1     2024-12-16 [1] Bioconductor 3.20 (R 4.4.2)\n bit                                            4.6.0      2025-03-06 [1] CRAN (R 4.4.2)\n bit64                                          4.6.0-1    2025-01-16 [1] CRAN (R 4.4.2)\n bitops                                         1.0-9      2024-10-03 [1] CRAN (R 4.4.2)\n blob                                           1.2.4      2023-03-17 [1] CRAN (R 4.4.2)\n BSgenome                                     * 1.74.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0      2024-11-01 [1] Bioconductor\n cachem                                         1.1.0      2024-05-16 [1] CRAN (R 4.4.2)\n cli                                            3.6.4      2025-02-13 [1] CRAN (R 4.4.2)\n codetools                                      0.2-20     2024-03-31 [2] CRAN (R 4.4.2)\n crayon                                         1.5.3      2024-06-20 [1] CRAN (R 4.4.2)\n curl                                           6.2.2      2025-03-24 [1] CRAN (R 4.4.2)\n data.table                                     1.17.0     2025-02-22 [1] CRAN (R 4.4.2)\n DBI                                            1.2.3      2024-06-02 [1] CRAN (R 4.4.2)\n DelayedArray                                   0.32.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n dichromat                                      2.0-0.1    2022-05-02 [1] CRAN (R 4.4.2)\n digest                                         0.6.37     2024-08-19 [1] CRAN (R 4.4.2)\n dplyr                                          1.1.4      2023-11-17 [1] CRAN (R 4.4.2)\n evaluate                                       1.0.3      2025-01-10 [1] CRAN (R 4.4.2)\n farver                                         2.1.2      2024-05-13 [1] CRAN (R 4.4.2)\n fastmap                                        1.2.0      2024-05-15 [1] CRAN (R 4.4.2)\n footprintR                                   * 0.3.2      2025-03-26 [1] Github (fmicompbio/footprintR@04d9c8f)\n generics                                       0.1.3      2022-07-05 [1] CRAN (R 4.4.2)\n GenomeInfoDb                                 * 1.42.3     2025-01-27 [1] Bioconductor 3.20 (R 4.4.2)\n GenomeInfoDbData                               1.2.13     2024-10-31 [1] Bioconductor\n GenomicAlignments                              1.42.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n GenomicFeatures                              * 1.58.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n GenomicRanges                                * 1.58.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n ggforce                                        0.4.2      2024-02-19 [1] CRAN (R 4.4.2)\n ggplot2                                        3.5.1      2024-04-23 [1] CRAN (R 4.4.2)\n glue                                           1.8.0      2024-09-30 [1] CRAN (R 4.4.2)\n gtable                                         0.3.6      2024-10-25 [1] CRAN (R 4.4.2)\n htmltools                                      0.5.8.1    2024-04-04 [1] CRAN (R 4.4.2)\n htmlwidgets                                    1.6.4      2023-12-06 [1] CRAN (R 4.4.2)\n httr                                           1.4.7      2023-08-15 [1] CRAN (R 4.4.2)\n IRanges                                      * 2.40.1     2024-12-05 [1] Bioconductor 3.20 (R 4.4.2)\n jsonlite                                       1.9.1      2025-03-03 [1] CRAN (R 4.4.2)\n KEGGREST                                       1.46.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n knitr                                          1.50       2025-03-16 [1] CRAN (R 4.4.2)\n labeling                                       0.4.3      2023-08-29 [1] CRAN (R 4.4.2)\n lattice                                        0.22-6     2024-03-20 [2] CRAN (R 4.4.2)\n lifecycle                                      1.0.4      2023-11-07 [1] CRAN (R 4.4.2)\n magrittr                                       2.0.3      2022-03-30 [1] CRAN (R 4.4.2)\n MASS                                           7.3-61     2024-06-13 [2] CRAN (R 4.4.2)\n Matrix                                         1.7-1      2024-10-18 [2] CRAN (R 4.4.2)\n MatrixGenerics                                 1.18.1     2025-01-09 [1] Bioconductor 3.20 (R 4.4.2)\n matrixStats                                    1.5.0      2025-01-07 [1] CRAN (R 4.4.2)\n memoise                                        2.0.1      2021-11-26 [1] CRAN (R 4.4.2)\n patchwork                                    * 1.3.0      2024-09-16 [1] CRAN (R 4.4.2)\n pillar                                         1.10.1     2025-01-07 [1] CRAN (R 4.4.2)\n pkgconfig                                      2.0.3      2019-09-22 [1] CRAN (R 4.4.2)\n png                                            0.1-8      2022-11-29 [1] CRAN (R 4.4.2)\n polyclip                                       1.10-7     2024-07-23 [1] CRAN (R 4.4.2)\n purrr                                          1.0.4      2025-02-05 [1] CRAN (R 4.4.2)\n R6                                             2.6.1      2025-02-15 [1] CRAN (R 4.4.2)\n RColorBrewer                                   1.1-3      2022-04-03 [1] CRAN (R 4.4.2)\n Rcpp                                           1.0.14     2025-01-12 [1] CRAN (R 4.4.2)\n RCurl                                          1.98-1.17  2025-03-22 [1] CRAN (R 4.4.2)\n restfulr                                       0.0.15     2022-06-16 [1] CRAN (R 4.4.2)\n rjson                                          0.2.23     2024-09-16 [1] CRAN (R 4.4.2)\n rlang                                          1.1.5      2025-01-17 [1] CRAN (R 4.4.2)\n rmarkdown                                      2.29       2024-11-04 [1] CRAN (R 4.4.2)\n Rsamtools                                      2.22.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n RSQLite                                        2.3.9      2024-12-03 [1] CRAN (R 4.4.2)\n rstudioapi                                     0.17.1     2024-10-22 [1] CRAN (R 4.4.2)\n rtracklayer                                  * 1.66.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n S4Arrays                                       1.6.0      2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n S4Vectors                                    * 0.44.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n scales                                         1.3.0.9000 2025-01-29 [1] Github (r-lib/scales@ee03582)\n sessioninfo                                    1.2.3      2025-02-05 [1] CRAN (R 4.4.2)\n SparseArray                                    1.6.2      2025-02-20 [1] Bioconductor 3.20 (R 4.4.2)\n SummarizedExperiment                           1.36.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n tibble                                         3.2.1      2023-03-20 [1] CRAN (R 4.4.2)\n tidyr                                          1.3.1      2024-01-24 [1] CRAN (R 4.4.2)\n tidyselect                                     1.2.1      2024-03-11 [1] CRAN (R 4.4.2)\n tweenr                                         2.0.3      2024-02-26 [1] CRAN (R 4.4.2)\n TxDb.Mmusculus.GENCODE.GRCm39.gencodeM34     * 0.1.0      2024-11-01 [1] Bioconductor\n UCSC.utils                                     1.2.0      2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n vctrs                                          0.6.5      2023-12-01 [1] CRAN (R 4.4.2)\n viridisLite                                    0.4.2      2023-05-02 [1] CRAN (R 4.4.2)\n withr                                          3.0.2      2024-10-28 [1] CRAN (R 4.4.2)\n xfun                                           0.51       2025-02-19 [1] CRAN (R 4.4.2)\n XML                                            3.99-0.18  2025-01-01 [1] CRAN (R 4.4.2)\n XVector                                      * 0.46.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n yaml                                           2.3.10     2024-07-26 [1] CRAN (R 4.4.2)\n zlibbioc                                       1.52.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n zoo                                            1.8-13     2025-02-22 [1] CRAN (R 4.4.2)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.4-release-foss-2024.05_BioC-3.20-release-foss-2024.05\n [2] /tungstenfs/groups/gbioinfo/Appz/easybuild/software/R/4.4.2-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing regions with `plotRegion`</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html",
    "href": "nucleosomes.html",
    "title": "5  Nucleosome analyses",
    "section": "",
    "text": "5.1 Preparation\nWe first load the packages and the genome needed for these tasks.\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\n\nlibrary(footprintR)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(GenomicRanges)\nlibrary(SummarizedExperiment)\nlibrary(BSgenomeName, character.only = TRUE)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\ngenome(gnm) &lt;- \"mm39\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#read-data",
    "href": "nucleosomes.html#read-data",
    "title": "5  Nucleosome analyses",
    "section": "5.2 Read data",
    "text": "5.2 Read data\nOur data is obtained from modBam file from a wild-type sample, for which 6mA modification calling has been performed. We use the readModBam function to read data from an 2000-bp region around a CTCF binding site on chromosome 8 and store it in a SummarizedExperiment object. For more information about reading data with footprintR, see Chapter 2.\n\n# Read data\nctcfsite &lt;- as(\"chr8:6622465-6622483\", \"GRanges\")\nreg &lt;- resize(ctcfsite, width = 2000, fix = \"center\")\n\nse &lt;- readModBam(\n    bamfiles = c(wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = reg,\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\n\n# add summary-level assays\nse &lt;- flattenReadLevelAssay(se)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#sec-place-nucleosomes",
    "href": "nucleosomes.html#sec-place-nucleosomes",
    "title": "5  Nucleosome analyses",
    "section": "5.3 Placing nucleosome footprints",
    "text": "5.3 Placing nucleosome footprints\nThe calcFootprintScores function uses a vector of weights to identify high-scoring regions on individual reads that show the modification pattern given in these weights. The score of a region on a read measures how well modification probabilities correlate with weights in the weight vector. High-scoring footprints that score above a provided threshold can be added to our se object using addFootprints, which will call calcFootprintScores internally.\nIn order to find nucleosomes, we construct a weight vector called wgt of a total length of 170 bp, consisting of a central 140 bp region in which we expect low modifications (the region protected by the nucleosome) flanked by two linker regions of 15 bp each in which we expect high modification. We adjust the weights in the flanks and central region such that the overall mean is close to zero:\n\n# nucleosome footprint\nwgt &lt;- rep(c(0.5, -0.5, 0.5) * c(140/170, 30/170, 140/170), c(15, 140, 15))\nmean(wgt)\n\n[1] -8.115253e-18\n\nggplot(data.frame(Position = seq_along(wgt), Weight = wgt),\n       aes(Position, Weight)) +\n    geom_col() +\n    geom_hline(yintercept = 0, linetype = \"dashed\") +\n    theme_bw()\n\n\n\n\n\n\n\n\nNow we can scan the reads for high-scoring footprints and add them to the colData of our SummarizedExperiment object, under a column name given by the name argument:\n\nse &lt;- addFootprints(se = se, wgt = wgt, thresh = 0.03, name = \"nucl\")\n\nℹ calculating footprint scores\n\n\n✔ calculating footprint scores [518ms]\n\n\n\n\n\nℹ segmenting footprint scores\n\n\n✔ segmenting footprint scores [782ms]\n\n\n\n\n\nThe footprints are stored as a list with one element for each sample, containing an IRangesList. Its elements are the reads of that sample, and the ranges correspond to individual footprints:\n\nse$nucl\n\n$wt2\nIRangesList object of length 62:\n$`wt2-2b63fef6-6d5c-4aa4-b6a1-aebd5390cc83`\nIRanges object with 37 ranges and 0 metadata columns:\n           start       end     width\n       &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;\n   [1]   6610367   6610506       140\n   [2]   6610900   6611039       140\n   [3]   6611097   6611236       140\n   [4]   6611677   6611816       140\n   [5]   6612665   6612804       140\n   ...       ...       ...       ...\n  [33]   6622587   6622726       140\n  [34]   6622762   6622901       140\n  [35]   6623311   6623450       140\n  [36]   6623890   6624029       140\n  [37]   6624088   6624227       140\n\n...\n&lt;61 more elements&gt;\n\n\nThe nucleosome footprints can be visualized using plotRegion:\n\nplotRegion(se, region = reg,\n           tracks = list(list(trackData=\"mod_prob\", trackType=\"Heatmap\",\n                              interpolate = TRUE,\n                              footprintColumns = \"nucl\",\n                              footprintColors = c(nucl = \"green3\"),\n                              orderReads = \"squish\"),\n                         list(trackData = \"FracMod\", trackType = \"Smooth\",\n                              smoothMethod=\"rollingMean\", windowSize=41,\n                              highlightRegions = ctcfsite)),\n                    sequenceContext = \"A\") +\n        patchwork::plot_layout(heights = c(2, 0.6))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#sec-estimate-nrl",
    "href": "nucleosomes.html#sec-estimate-nrl",
    "title": "5  Nucleosome analyses",
    "section": "5.4 Estimating nucleosome repeat length",
    "text": "5.4 Estimating nucleosome repeat length\nPlacing of individual nucleosomes in principle allows also measuring their average distance, the nucleosome repeat length (NRL). This measure can also be obtained without placing of nucleosomes, from the distribution of distances between modified bases in which multiples of the NRL are over-represented. This idea is related to the phasogram analysis described by Valouev et al. (2011).\nIn footprintR, this analysis can be performed by first calculating the distribution of distances between modified bases using calcModbaseSpacing:\n\nmoddist &lt;- calcModbaseSpacing(se)\nstr(moddist)\n\nList of 1\n $ wt2: Named num [1:1000] 3513 2262 1789 1296 1176 ...\n  ..- attr(*, \"names\")= chr [1:1000] \"1\" \"2\" \"3\" \"4\" ...\n\n\nFrom this distribution, which was obtained from just 62 reads, we can accurately estimate the NRL using estimateNRL:\n\nres &lt;- estimateNRL(x = moddist$wt2)\nres[1:2]\n\n$nrl\n[1] 190.3\n\n$nrl.CI95\n   2.5 %   97.5 % \n187.6821 192.9179 \n\n\nAlternatively, the distance distribution can also be visualized together with an estimate of the NRL using plotModbaseSpacing, either as a summary plot:\n\nplotModbaseSpacing(x = moddist$wt2)\n\n\n\n\n\n\n\n\n… or as a set of three plots that illustrate the different steps of the estimation:\n\nplotModbaseSpacing(x = moddist$wt2, detailedPlots = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "nucleosomes.html#quantifying-nucleosome-phasing",
    "href": "nucleosomes.html#quantifying-nucleosome-phasing",
    "title": "5  Nucleosome analyses",
    "section": "5.5 Quantifying nucleosome phasing",
    "text": "5.5 Quantifying nucleosome phasing\nNucleosomes that occupy similar positions across reads are called phased and can result for example from a sequence-specific DNA binding protein that constrains their movement along the DNA. Genomic regions with phased nucleosomes can be identified on the summary-level data by phasingScoreFourier, which calculates the strength of a periodic component in the summary-level data corresponding to the expected period of nucleosomes (see Section 5.4 for how that period can be estimated).\nWe start such an analysis by first reading summary-level data for a larger genomic region, in which we want to calculate phasing scores:\n\nreg &lt;- GRanges(\"chr8\", IRanges(6637500, 6642500))\nse &lt;- readModBam(\n    bamfiles = c(wt2 = \"data/mESC_wt_6mA_rep2.bam\"),\n    modbase = \"a\", \n    regions = reg,\n    level = \"summary\",\n    trim = TRUE,\n    seqinfo = seqinfo(gnm), \n    sequenceContextWidth = 1, \n    sequenceReference = gnm\n)\n\nNext, we construct windowgr, a GRanges objects defining the windows in reg for which we want to calculate a nucleosome phasing score:\n\nwindowStep &lt;- 190\nwindowSize &lt;- 4 * windowStep\ns &lt;- seq(start(reg), end(reg) - (windowSize - windowStep) + 1, by = windowStep)\nwindowgr &lt;- GRanges(seqnames = seqnames(reg),\n                    ranges = IRanges(start = s, width = windowSize))\n\nFinally, we calculate phasing socres for the windows in windowgr. The windowSize and the value of the numCoef argument define the period of interest \\(poi = windowSize / (numCoef - 1)\\) (here: 190 bp, see phasingScoreFourier for details):\n\nseFourier &lt;- phasingScoreFourier(se = se, gr = windowgr, numCoef = 5)\n\nWe can plot the window scores together with the fraction of modification. Note that the sequential windows for which the phasing score was calculated are overlapping (the window with the maximal phasing score is indicated by the red line below):\n\n# get plotting data using plotRegion\np &lt;- plotRegion(se, region = reg,\n                tracks = list(list(trackData = \"FracMod\", trackType = \"Smooth\",\n                                   smoothMethod = \"rollingMean\", windowSize = 101)))\npd &lt;- p$layers[[1]]$data\n\n# get phasing scores\npd2 &lt;- as.data.frame(rowRanges(seFourier))\npd2$position &lt;- mid(rowRanges(seFourier))\npd2$phasingScoreAbs &lt;- assay(seFourier, \"phasingScoreAbs\")[, \"wt2\"]\n\n# visualize\nggplot(mapping = aes(x = position)) +\n    geom_tile(data = pd2,\n              mapping = aes(y = mean(pd$value_smooth), fill = phasingScoreAbs),\n              width = windowStep, height = Inf, alpha = 0.4) +\n    scale_fill_viridis_c() +\n    geom_segment(data = pd2[which.max(pd2$phasingScoreAbs), , drop = FALSE],\n                 inherit.aes = FALSE,\n                 mapping = aes(x = start, xend = end, y = min(pd$value_smooth)),\n                 colour = \"red\", linewidth = 2) +\n    geom_line(data = pd,\n              mapping = aes(y = value_smooth)) +\n    ylim(range(pd$value_smooth)) +\n    labs(x = paste0(\"Position on \", seqnames(reg), \" (bp)\"),\n         y = \"Fraction of modified bases\",\n         fill = paste0(\"Phasing score\\n\", windowStep, \" bp period\")) +\n    theme_bw() +\n    theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\nValouev, Anton, Steven M. Johnson, Scott D. Boyd, Cheryl L. Smith, Andrew Z. Fire, and Arend Sidow. 2011. “Determinants of Nucleosome Organization in Primary Human Cells.” Nature 474 (7352): 516–20. https://doi.org/10.1038/nature10002.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Nucleosome analyses</span>"
    ]
  },
  {
    "objectID": "scanning.html",
    "href": "scanning.html",
    "title": "6  Scanning the genome for regions of interest",
    "section": "",
    "text": "6.1 Genome-wide DMR scanning (between samples)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#genome-wide-nucleosome-phasing-within-samples",
    "href": "scanning.html#genome-wide-nucleosome-phasing-within-samples",
    "title": "6  Scanning the genome for regions of interest",
    "section": "6.2 Genome-wide nucleosome phasing (within samples)",
    "text": "6.2 Genome-wide nucleosome phasing (within samples)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#genome-wide-estimation-of-cpg-methylation-levels-within-samples",
    "href": "scanning.html#genome-wide-estimation-of-cpg-methylation-levels-within-samples",
    "title": "6  Scanning the genome for regions of interest",
    "section": "6.3 Genome-wide estimation of CpG methylation levels (within samples)",
    "text": "6.3 Genome-wide estimation of CpG methylation levels (within samples)\nIn the examples above, the scores were calculated over windows of varying size. By setting the window size to 1, we can also calculate single nucleotide-level scores. Here, as an example, we illustrate how to estimate the global distribution of methylation levels across all CpGs in the genome. For time reasons, we only consider chromosome 19 here - a genome-wide scanning can be obtained by expanding the chromosomeLengths argument to all chromosomes.\nIn this case, we again use sumNmodNvalid as the quantFunction, as it provides an estimate of the fraction modified bases for each window (in this case, since the window size is 1, for each modified base). We use getRangesWithAssayValues as the scoreFunction, which will move the calculated values from the FracMod and Nvalid assays to the metadata columns of the nucleotide-level GRanges object. By setting scoreAction to “pass”, we instruct the scanning framework to not process the nucleotide-level scores further, but simply return the GRanges object with the added metadata columns. Finally, by setting the sequenceContext to “NCG”, we make sure to only retain positions where the genomic sequence is CG.\n\n# Define the bam file to use and generate sample annotation table\nbamfiles &lt;- c(wt2 = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\")\nsampleAnnot &lt;- data.frame(sample = names(bamfiles))\n\n# Run scanning\nsystem.time({\n    rescpg &lt;- scanForHighScoringRegions(\n        bamfiles = bamfiles,\n        sampleAnnot = sampleAnnot,\n        chromosomeLengths = seqlengths(gnm)[paste0(\"chr\", 19)],\n        quantFunction = \"sumNmodNvalid\",\n        quantFunctionArgs = list(),\n        scoreFunction = \"getRangesWithAssayValues\",\n        scoreFunctionArgs = list(assayName = c(\"FracMod\", \"Nvalid\")),\n        modbase = \"m\",\n        modProbThreshold = 0.5,\n        tileSize = 1e6,\n        seqinfo = seqinfo(gnm),\n        sequenceContextWidth = 3,\n        sequenceReference = gnm,\n        sequenceContext = \"NCG\",\n        windowMode = \"fixed\",\n        windowSize = 1,\n        windowStep = 1,\n        scoreCol = paste0(\"FracMod.\", names(bamfiles)[1]),\n        scoreAction = \"pass\",\n        BPPARAM = bpParam,\n        verbose = FALSE\n    )\n})\n\n   user  system elapsed \n245.150  11.684 257.709 \n\n\nNext, we plot the distribution of modification fractions.\n\nplotdf &lt;- as.data.frame(unname(rescpg)) |&gt;\n    tidyr::pivot_longer(cols = -c(seqnames, start, end, width, strand), \n                        names_to = c(\".value\", \"sample\"),\n                        names_pattern = '(FracMod|Nvalid)\\\\.(.*)') |&gt; \n    dplyr::mutate(FracModBin = Hmisc::cut2(FracMod,cuts = seq(0, 1, by = 0.1)))\nhead(plotdf)\n\n# A tibble: 6 × 9\n  seqnames   start     end width strand sample FracMod Nvalid FracModBin\n  &lt;fct&gt;      &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;     \n1 chr19    3050119 3050119     1 *      wt2       1         4 [0.9,1.0] \n2 chr19    3050120 3050120     1 *      wt2       1         2 [0.9,1.0] \n3 chr19    3050316 3050316     1 *      wt2       0.75      4 [0.7,0.8) \n4 chr19    3050317 3050317     1 *      wt2       1         2 [0.9,1.0] \n5 chr19    3050603 3050603     1 *      wt2       1         6 [0.9,1.0] \n6 chr19    3050604 3050604     1 *      wt2       1         1 [0.9,1.0] \n\nggplot(plotdf, aes(x = FracModBin)) + \n    geom_bar() + \n    labs(title = \"All CpGs\", x = \"FracMod (binned)\") + \n    theme_bw() + \n    theme(axis.text.y = element_text(size = 12),\n          axis.text.x = element_text(size = 12, angle = 45, hjust = 1),\n          axis.title = element_text(size = 14))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "scanning.html#session-info",
    "href": "scanning.html#session-info",
    "title": "6  Scanning the genome for regions of interest",
    "section": "6.4 Session info",
    "text": "6.4 Session info\n\n\n Click to view session info \n\n\nsessioninfo::session_info(info = \"packages\")\n\n═ Session info ═══════════════════════════════════════════════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n package                                      * version    date (UTC) lib source\n abind                                          1.4-8      2024-09-12 [1] CRAN (R 4.4.2)\n backports                                      1.5.0      2024-05-23 [1] CRAN (R 4.4.2)\n base64enc                                      0.1-3      2015-07-28 [1] CRAN (R 4.4.2)\n Biobase                                        2.66.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocGenerics                                 * 0.52.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocIO                                       * 1.16.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BiocParallel                                 * 1.40.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n Biostrings                                   * 2.74.1     2024-12-16 [1] Bioconductor 3.20 (R 4.4.2)\n bitops                                         1.0-9      2024-10-03 [1] CRAN (R 4.4.2)\n BSgenome                                     * 1.74.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34 * 0.1.0      2024-11-01 [1] Bioconductor\n checkmate                                      2.3.2      2024-07-29 [1] CRAN (R 4.4.2)\n cli                                            3.6.4      2025-02-13 [1] CRAN (R 4.4.2)\n cluster                                        2.1.6      2023-12-01 [2] CRAN (R 4.4.2)\n codetools                                      0.2-20     2024-03-31 [2] CRAN (R 4.4.2)\n colorspace                                     2.1-1      2024-07-26 [1] CRAN (R 4.4.2)\n crayon                                         1.5.3      2024-06-20 [1] CRAN (R 4.4.2)\n curl                                           6.2.2      2025-03-24 [1] CRAN (R 4.4.2)\n data.table                                     1.17.0     2025-02-22 [1] CRAN (R 4.4.2)\n DelayedArray                                   0.32.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n dichromat                                      2.0-0.1    2022-05-02 [1] CRAN (R 4.4.2)\n digest                                         0.6.37     2024-08-19 [1] CRAN (R 4.4.2)\n dplyr                                          1.1.4      2023-11-17 [1] CRAN (R 4.4.2)\n evaluate                                       1.0.3      2025-01-10 [1] CRAN (R 4.4.2)\n farver                                         2.1.2      2024-05-13 [1] CRAN (R 4.4.2)\n fastmap                                        1.2.0      2024-05-15 [1] CRAN (R 4.4.2)\n footprintR                                   * 0.3.2      2025-03-26 [1] Github (fmicompbio/footprintR@04d9c8f)\n foreign                                        0.8-87     2024-06-26 [2] CRAN (R 4.4.2)\n Formula                                        1.2-5      2023-02-24 [1] CRAN (R 4.4.2)\n generics                                       0.1.3      2022-07-05 [1] CRAN (R 4.4.2)\n GenomeInfoDb                                 * 1.42.3     2025-01-27 [1] Bioconductor 3.20 (R 4.4.2)\n GenomeInfoDbData                               1.2.13     2024-10-31 [1] Bioconductor\n GenomicAlignments                              1.42.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n GenomicRanges                                * 1.58.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n ggforce                                        0.4.2      2024-02-19 [1] CRAN (R 4.4.2)\n ggplot2                                      * 3.5.1      2024-04-23 [1] CRAN (R 4.4.2)\n glue                                           1.8.0      2024-09-30 [1] CRAN (R 4.4.2)\n gridExtra                                      2.3        2017-09-09 [1] CRAN (R 4.4.2)\n gtable                                         0.3.6      2024-10-25 [1] CRAN (R 4.4.2)\n Hmisc                                          5.2-3      2025-03-16 [1] CRAN (R 4.4.2)\n htmlTable                                      2.4.3      2024-07-21 [1] CRAN (R 4.4.2)\n htmltools                                      0.5.8.1    2024-04-04 [1] CRAN (R 4.4.2)\n htmlwidgets                                    1.6.4      2023-12-06 [1] CRAN (R 4.4.2)\n httr                                           1.4.7      2023-08-15 [1] CRAN (R 4.4.2)\n IRanges                                      * 2.40.1     2024-12-05 [1] Bioconductor 3.20 (R 4.4.2)\n jsonlite                                       1.9.1      2025-03-03 [1] CRAN (R 4.4.2)\n knitr                                          1.50       2025-03-16 [1] CRAN (R 4.4.2)\n labeling                                       0.4.3      2023-08-29 [1] CRAN (R 4.4.2)\n lattice                                        0.22-6     2024-03-20 [2] CRAN (R 4.4.2)\n lifecycle                                      1.0.4      2023-11-07 [1] CRAN (R 4.4.2)\n magrittr                                       2.0.3      2022-03-30 [1] CRAN (R 4.4.2)\n MASS                                           7.3-61     2024-06-13 [2] CRAN (R 4.4.2)\n Matrix                                         1.7-1      2024-10-18 [2] CRAN (R 4.4.2)\n MatrixGenerics                                 1.18.1     2025-01-09 [1] Bioconductor 3.20 (R 4.4.2)\n matrixStats                                    1.5.0      2025-01-07 [1] CRAN (R 4.4.2)\n nnet                                           7.3-19     2023-05-03 [2] CRAN (R 4.4.2)\n patchwork                                      1.3.0      2024-09-16 [1] CRAN (R 4.4.2)\n pillar                                         1.10.1     2025-01-07 [1] CRAN (R 4.4.2)\n pkgconfig                                      2.0.3      2019-09-22 [1] CRAN (R 4.4.2)\n polyclip                                       1.10-7     2024-07-23 [1] CRAN (R 4.4.2)\n purrr                                          1.0.4      2025-02-05 [1] CRAN (R 4.4.2)\n R6                                             2.6.1      2025-02-15 [1] CRAN (R 4.4.2)\n RColorBrewer                                   1.1-3      2022-04-03 [1] CRAN (R 4.4.2)\n Rcpp                                           1.0.14     2025-01-12 [1] CRAN (R 4.4.2)\n RCurl                                          1.98-1.17  2025-03-22 [1] CRAN (R 4.4.2)\n restfulr                                       0.0.15     2022-06-16 [1] CRAN (R 4.4.2)\n rjson                                          0.2.23     2024-09-16 [1] CRAN (R 4.4.2)\n rlang                                          1.1.5      2025-01-17 [1] CRAN (R 4.4.2)\n rmarkdown                                      2.29       2024-11-04 [1] CRAN (R 4.4.2)\n rpart                                          4.1.23     2023-12-05 [2] CRAN (R 4.4.2)\n Rsamtools                                      2.22.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n rstudioapi                                     0.17.1     2024-10-22 [1] CRAN (R 4.4.2)\n rtracklayer                                  * 1.66.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n S4Arrays                                       1.6.0      2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n S4Vectors                                    * 0.44.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n scales                                         1.3.0.9000 2025-01-29 [1] Github (r-lib/scales@ee03582)\n sessioninfo                                    1.2.3      2025-02-05 [1] CRAN (R 4.4.2)\n SparseArray                                    1.6.2      2025-02-20 [1] Bioconductor 3.20 (R 4.4.2)\n stringi                                        1.8.4      2024-05-06 [1] CRAN (R 4.4.2)\n stringr                                        1.5.1      2023-11-14 [1] CRAN (R 4.4.2)\n SummarizedExperiment                           1.36.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n tibble                                         3.2.1      2023-03-20 [1] CRAN (R 4.4.2)\n tidyr                                          1.3.1      2024-01-24 [1] CRAN (R 4.4.2)\n tidyselect                                     1.2.1      2024-03-11 [1] CRAN (R 4.4.2)\n tweenr                                         2.0.3      2024-02-26 [1] CRAN (R 4.4.2)\n UCSC.utils                                     1.2.0      2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n utf8                                           1.2.4      2023-10-22 [1] CRAN (R 4.4.2)\n vctrs                                          0.6.5      2023-12-01 [1] CRAN (R 4.4.2)\n withr                                          3.0.2      2024-10-28 [1] CRAN (R 4.4.2)\n xfun                                           0.51       2025-02-19 [1] CRAN (R 4.4.2)\n XML                                            3.99-0.18  2025-01-01 [1] CRAN (R 4.4.2)\n XVector                                      * 0.46.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n yaml                                           2.3.10     2024-07-26 [1] CRAN (R 4.4.2)\n zlibbioc                                       1.52.0     2024-10-29 [1] Bioconductor 3.20 (R 4.4.2)\n zoo                                            1.8-13     2025-02-22 [1] CRAN (R 4.4.2)\n\n [1] /tungstenfs/groups/gbioinfo/Appz/R/BioC/R-4.4-release-foss-2024.05_BioC-3.20-release-foss-2024.05\n [2] /tungstenfs/groups/gbioinfo/Appz/easybuild/software/R/4.4.2-foss-2024.05/lib64/R/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scanning the genome for regions of interest</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html",
    "href": "grouping-reads.html",
    "title": "7  Grouping reads",
    "section": "",
    "text": "7.1 Preparation\nWe first load the packages and the genome needed for these tasks.\nBSgenomeName &lt;- \"BSgenome.Mmusculus.GENCODE.GRCm39.gencodeM34\"\n\nlibrary(footprintR)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(GenomicRanges)\nlibrary(SummarizedExperiment)\nlibrary(BSgenomeName, character.only = TRUE)\nlibrary(VariantAnnotation)\nlibrary(stringdist)\n\n# Load genome\ngnm &lt;- get(BSgenomeName)\ngenome(gnm) &lt;- \"mm39\"",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#using-sequence-variation",
    "href": "grouping-reads.html#using-sequence-variation",
    "title": "7  Grouping reads",
    "section": "7.2 Using sequence variation",
    "text": "7.2 Using sequence variation\nOne reason for regrouping reads could be to sort them using genetic variation (e.g., single nucleotide variants), e.g. with the purpose of studying allele-specific signals. Typically, the heterozygous loci on which we would like to base such read grouping are known in advance (alternatively, we can use all positions within a given genomic region). In such cases, readModBam can automatically add “sequence labels” (consisting of the observed nucleotide in the indicated positions) to reads when reading the data, and these labels can later be used to regroup the reads.\nLet’s consider an example. We start by defining a region of interest, and reading a file with known heterozygous SNVs (for the purposes of this report, we have subset the complete VCF file to only SNVs overlapping the region of interest, but this is not necessary in general).\n\nreg &lt;- resize(as(\"chr7:23987184-23987363\", \"GRanges\"), width = 1300, fix = \"center\")\n\nhetsnv &lt;- readVcf(\"data/het_snp_chr7_23987184-23987363.vcf.gz\")\nhetpos &lt;- as(rowRanges(hetsnv), \"GPos\")\nhetpos$ALT &lt;- unlist(hetpos$ALT)\nhetpos\n\nUnstitchedGPos object with 13 positions and 5 metadata columns:\n                    seqnames       pos strand | paramRangeID            REF            ALT      QUAL      FILTER\n                       &lt;Rle&gt; &lt;integer&gt;  &lt;Rle&gt; |     &lt;factor&gt; &lt;DNAStringSet&gt; &lt;DNAStringSet&gt; &lt;numeric&gt; &lt;character&gt;\n  chr7:23986770_G/T     chr7  23986770      * |           NA              G              T   504.609           .\n  chr7:23986885_G/A     chr7  23986885      * |           NA              G              A   485.725           .\n  chr7:23987082_T/G     chr7  23987082      * |           NA              T              G   421.622           .\n  chr7:23987109_G/A     chr7  23987109      * |           NA              G              A   420.142           .\n  chr7:23987130_A/C     chr7  23987130      * |           NA              A              C   509.378           .\n                ...      ...       ...    ... .          ...            ...            ...       ...         ...\n  chr7:23987468_A/G     chr7  23987468      * |           NA              A              G   480.559           .\n  chr7:23987586_G/C     chr7  23987586      * |           NA              G              C   425.562           .\n  chr7:23987658_A/G     chr7  23987658      * |           NA              A              G   336.694           .\n  chr7:23987665_C/A     chr7  23987665      * |           NA              C              A   338.173           .\n  chr7:23987670_C/T     chr7  23987670      * |           NA              C              T   372.650           .\n  -------\n  seqinfo: 61 sequences from an unspecified genome\n\n\nWe next generate “expected” REF and ALT sequences by concatenating the sequences of the heterozygous SNVs overlapping the region of interest. These sequences will later be used to group reads into one of two categories (REF or ALT), based on the agreement with the expected sequences. Note that with this approach, we’re making the implicit assumption that the SNVs are phased (and thus that a read will not typically harbor a mix of the REF and ALT nucleotides) - for most reads in our example this turns out to be a valid assumption, but in other cases other grouping schemes may be preferable.\n\n# subset to SNVs in region of interest\nhetpos1 &lt;- subsetByOverlaps(hetpos, reg, ignore.strand = TRUE)\n(seqREF &lt;- paste(as.character(hetpos1$REF), collapse = \"\"))\n\n[1] \"GGTGATGTAGACC\"\n\n(seqALT &lt;- paste(as.character(hetpos1$ALT), collapse = \"\"))\n\n[1] \"TAGACCACGCGAT\"\n\n\nNext, we generate two versions of the genome sequence, obtained by injecting, respectively, the REF and ALT nucleotide above into the corresponding positions. These genomes will later be used to generate sequence contexts for the positions seen in the data, and filter out positions that are not annotated as (in the case below) CpGs. For more information about filtering, and how it can reduce the effect of sequencing errors, see Chapter 3 and Chapter 4.\n\ngnmREF &lt;- gnmALT &lt;- getSeq(gnm)\nfor (chr in names(gnmREF)) {\n    i &lt;- which(seqnames(hetpos) == chr)\n    gnmREF[[chr]] &lt;- replaceLetterAt(x = gnmREF[[chr]],\n                                     at = start(hetpos)[i],\n                                     letter = unlist(hetpos$REF[i]),\n                                     verbose = interactive())\n    gnmALT[[chr]] &lt;- replaceLetterAt(x = gnmALT[[chr]],\n                                     at = start(hetpos)[i],\n                                     letter = unlist(hetpos$ALT[i]),\n                                     verbose = interactive())\n}\n\nAfter this preparation, we read the data. In this case, we will work with a modBam file from a wild-type sample, for which 5mCpG modification calling has been performed. We specify the positions of the heterozygous SNVs to the variantPositions argument, which will generate a sequence label for each read.\n\nseC &lt;- readModBam(\n    bamfiles = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\", \n    regions = reg,\n    modbase = \"m\", \n    level = \"read\",\n    variantPositions = hetpos1, \n    trim = TRUE,\n    BPPARAM = BiocParallel::SerialParam(),\n    verbose = interactive()\n)\n# derived sequence labels\nseC$readInfo$s1$variant_label\n\n [1] \"TATACTGCGCGAT\" \"TAGACCAAGCCA-\" \"TAT-CAAGGCGAT\" \"TATAC--------\" \"GGAGATGTAGACC\" \"TAGACCA-GCGAT\" \"GGTGATGTAGACC\"\n [8] \"TAGACCACGCGAT\" \"GGTGA-GTAGACC\" \"TGCACACCGCAAT\" \"CATACTACGGG-T\" \"GGTGATGTAGACC\" \"GGTGACGTAGACC\" \"TAGACCA-GCGAT\"\n[15] \"TAGACTACGCGAT\" \"-A-ACTGTGCA-C\" \"TAGACCACGCGAC\" \"GGTGATGTAGACC\" \"TAGACCACGCGAT\" \"GGTGATGTAGAT-\" \"TAGACCACGCGAT\"\n[22] \"TAGACCACGCGAT\" \"TAGACCACGCGAT\" \"GATGATGTAGGCC\" \"GGTGATGTAGACC\" \"GGTGATGTAGATA\" \"GGTGATGTAGACC\" \"-ATAC-A-GTGAT\"\n[29] \"GGTGATGTAGACC\" \"TAGA-CATGCGGT\" \"GGTGATG-AGACC\" \"TATACCACGCGAT\" \"TAGACTACGCGAT\" \"TAGACCACGCGAT\" \"TAGACCACGCGAT\"\n[36] \"TAGACCACGCGGT\" \"TAGACTACGCGAT\" \"GGTGATGTAGACC\" \"GGTGATGTAGACC\" \"TAGACCACGCGAT\" \"TGGACCACGCGAT\" \"TAGA-CACGCGAT\"\n[43] \"GGTGATGTAGACC\" \"GGTGATGTAGACC\" \"-ATACCACGCGA-\" \"-GTGATGTAGACC\" \"--TGATGTAGACC\" \"--TGATGTAGATC\" \"----CCACGCGAT\"\n[50] \"-------TGCGCT\" \"-------TAGACC\" \"-------TAGACC\" \"--------AGACC\" \"----------GAT\" \"----------ACC\" \"-------------\"\n[57] \"-------------\"\n\n\nNext, we filter the data by sequence context, to only retain positions annotated as CG in both the REF and ALT genomes generated above. We achieve this by sequentially adding the sequence context from each of the genomes, and filtering by this sequence context.\n\n# REF genome\nseC &lt;- addSeqContext(x = seC, sequenceContextWidth = 3,\n                     sequenceReference = gnmREF)\nseC &lt;- filterPositions(seC, filters = \"sequenceContext\",\n                       sequenceContext = \"NCG\", assayNameNA = \"mod_prob\")\nseC &lt;- addSeqContext(x = seC, sequenceContextWidth = 3,\n                     sequenceReference = gnmALT)\nseC &lt;- filterPositions(seC, filters = \"sequenceContext\",\n                       sequenceContext = \"NCG\", assayNameNA = \"mod_prob\")\n\nWith the clean data, we next cluster the reads into two groups, based on which of the two expected sequences (seqREF or seqALT above) the respective sequence labels are most similar to. We request a Hamming distance of at most 0.34 based on the positions covered by the read - otherwise, the read is assigned to an NA category\n\n(varlabels &lt;- structure(\n    unlist(lapply(seC$readInfo, \"[[\", \"variant_label\"), use.names = FALSE),\n    names = unlist(lapply(seC$readInfo, rownames), use.names = FALSE)))\n\ns1-6e3b7da7-1cbb-467a-9824-e12f949740b9 s1-74ec6632-693e-4e13-a8a4-4946fa63f477 s1-f6296e8a-c87d-4ae0-8e5c-ed928ada2544 \n                        \"TATACTGCGCGAT\"                         \"TAGACCAAGCCA-\"                         \"TAT-CAAGGCGAT\" \ns1-cd98081d-7042-4ce7-8a6e-67c835c5242d s1-ca720391-dd3b-4448-8388-ec7bafe86221 s1-07c46b8a-69cf-4a1d-87cd-d787193c56d8 \n                        \"TATAC--------\"                         \"GGAGATGTAGACC\"                         \"TAGACCA-GCGAT\" \ns1-8a78dd6b-5ec1-4caf-959c-bb13647fec0d s1-c6860136-5766-487e-b264-34e0820e81ad s1-2b6c19d4-553c-4986-b8cd-27f71205a23a \n                        \"GGTGATGTAGACC\"                         \"TAGACCACGCGAT\"                         \"GGTGA-GTAGACC\" \ns1-889002b9-1f49-4b54-a6ae-becfc63973ba s1-8086a333-caa3-4fe0-a24e-eb0477ab70da s1-c3eda2bf-3db4-4c01-8535-b70a764dcce8 \n                        \"TGCACACCGCAAT\"                         \"CATACTACGGG-T\"                         \"GGTGATGTAGACC\" \ns1-ec9c9f06-9f37-47da-a9de-9f872a28622d s1-5dc9d447-fd02-4493-8c12-2de2b705f0a7 s1-c23f32ba-6e41-4238-8f2f-5d7dc567094c \n                        \"GGTGACGTAGACC\"                         \"TAGACCA-GCGAT\"                         \"TAGACTACGCGAT\" \ns1-6b217655-278b-4a52-b76a-60e0b919e1bc s1-b8ec4fdc-2339-4a7a-acea-8d36a8c6191e s1-f7b1f575-bfad-46ee-bf0a-c252f41998e5 \n                        \"-A-ACTGTGCA-C\"                         \"TAGACCACGCGAC\"                         \"GGTGATGTAGACC\" \ns1-d09a3082-8290-4a64-a1b0-16b955e9d377 s1-47422c66-d8d9-4cd5-bc63-253f8c664ce4 s1-e21ea203-8b2b-4db3-82e7-3872c3aedbdb \n                        \"TAGACCACGCGAT\"                         \"GGTGATGTAGAT-\"                         \"TAGACCACGCGAT\" \ns1-6fe85a60-5c2b-4ab9-8eb8-c31c9823c52c s1-16ed4c6b-d7c4-45cf-a0ee-b5417715bd05 s1-4db7595b-53a5-43a0-8f26-4bf7c4eb8e2c \n                        \"TAGACCACGCGAT\"                         \"TAGACCACGCGAT\"                         \"GATGATGTAGGCC\" \ns1-b292d6ed-c3f1-4996-8c09-758ee688d157 s1-8147266c-9bdf-48c1-95a2-3a8fe543072f s1-144ab6dd-2c83-4116-b742-f0767a0d78bd \n                        \"GGTGATGTAGACC\"                         \"GGTGATGTAGATA\"                         \"GGTGATGTAGACC\" \ns1-bd1e55f8-aa2d-4746-9018-769f3c2cf7cc s1-0298ccd2-51a4-4567-bd62-9f7c08ebe222 s1-4e1b345e-d1a2-470c-b123-096f1b89ffc9 \n                        \"-ATAC-A-GTGAT\"                         \"GGTGATGTAGACC\"                         \"TAGA-CATGCGGT\" \ns1-ab4e005c-d6bd-46c0-bf70-880811d9a4cb s1-f47dafdf-2e54-473c-8c91-de47074168c8 s1-f972a57a-22e0-4dda-9cbd-c9a9546ef7d4 \n                        \"GGTGATG-AGACC\"                         \"TATACCACGCGAT\"                         \"TAGACTACGCGAT\" \ns1-bc571ef1-141b-499f-a0ec-f8ed4d304b36 s1-f93df80d-7a5b-40fe-a704-611e87857ef7 s1-bedd36a7-b697-4ade-8d9d-84c21a7a1bce \n                        \"TAGACCACGCGAT\"                         \"TAGACCACGCGAT\"                         \"TAGACCACGCGGT\" \ns1-197fa983-613c-40cf-bfc6-195d57250b61 s1-09ca0166-cded-466c-90d7-074b76f6c462 s1-39a0b0f7-ed43-44a4-931f-649b94858fd5 \n                        \"TAGACTACGCGAT\"                         \"GGTGATGTAGACC\"                         \"GGTGATGTAGACC\" \ns1-1575671f-db5c-4840-8903-e049f5d1c191 s1-13cf1365-9558-4731-b905-9375968236ce s1-cf62e24a-3b16-4984-9dce-722d83114a04 \n                        \"TAGACCACGCGAT\"                         \"TGGACCACGCGAT\"                         \"TAGA-CACGCGAT\" \ns1-635eac53-bf72-4595-8f0a-ed25889ade7c s1-6bce848a-e1e3-4c58-ae13-782de5ad8353 s1-f8708894-fcdc-4bb4-b4f0-85962022c458 \n                        \"GGTGATGTAGACC\"                         \"GGTGATGTAGACC\"                         \"-ATACCACGCGA-\" \ns1-21af2d84-95cc-4038-92de-ca10dc907c1b s1-18b3d1ae-13bc-4167-a62d-985df0226d5d s1-84372ce1-9eb4-49a1-bfdf-0fcfe550a1e3 \n                        \"-GTGATGTAGACC\"                         \"--TGATGTAGACC\"                         \"--TGATGTAGATC\" \ns1-2e5ac26d-fb0d-4960-a990-717820ea5489 s1-a11ee0c2-efe1-49db-a777-fd693d49f644 s1-77d34112-3371-4dc4-90e2-c5fce537de28 \n                        \"----CCACGCGAT\"                         \"-------TGCGCT\"                         \"-------TAGACC\" \ns1-1193f97a-20eb-43b0-856f-6ce487960d71 s1-ceaddd34-9916-435c-8d7d-624ee5aa2f7c s1-be1188b2-5e8e-4c3b-b1c9-f745fb787f02 \n                        \"-------TAGACC\"                         \"--------AGACC\"                         \"----------GAT\" \ns1-30b6af10-7d70-4ace-b40a-4fdb7d97d600 s1-4c257eb0-b51a-4e0d-bb99-fc072f15f8fd \n                        \"----------ACC\"                         \"-------------\" \n\ndists &lt;- stringdistmatrix(a = c(seqREF, seqALT),\n                          b = varlabels, method = \"hamming\",\n                          nthread = 2) / nchar(varlabels[1])\nmethGroup &lt;- ifelse(colMins(dists) &lt; 0.34,\n                    paste0(c(\"REF\", \"ALT\"), \": \", c(seqREF, seqALT))[apply(dists, 2, which.min)], NA)\ntable(methGroup, useNA = \"ifany\")\n\nmethGroup\nALT: TAGACCACGCGAT REF: GGTGATGTAGACC               &lt;NA&gt; \n                24                 20                 12 \n\n\nBased on this read grouping, we can now regroup the reads in such a way that the columns of the SummarizedExperiment object corresponds to allele (REF or ALT) rather than the sample. This is achieved with the regroupReads function.\n\n# generate named list of read groups\nmethGroupList &lt;- split(names(varlabels), methGroup)\n\n# regroup reads\nseCgrouped &lt;- regroupReads(seC, methGroupList)\n\n# calculate average modification fraction by allele\nseCgrouped &lt;- flattenReadLevelAssay(seCgrouped, keepReads = TRUE)\n\n# plot\nplotRegion(seCgrouped, region = reg,\n           tracks = list(\n               list(trackData = \"mod_prob\", trackType = \"Lollipop\",\n                    legendTitle = \"5mCpG\"),\n               list(trackData = \"FracMod\", trackType = \"Point\",\n                    arglistPoint = list(size = 3)))) +\n    plot_layout(heights = c(7.5, 1.5))\n\n\n\n\n\n\n\n\nIn this example, we notice a clear difference in methylation between the two alleles.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#modification-based",
    "href": "grouping-reads.html#modification-based",
    "title": "7  Grouping reads",
    "section": "7.3 Modification based",
    "text": "7.3 Modification based\nAs an alternative to the genetic grouping used above, we could also group the reads based on the observed data. To exemplify this, we will look at a known imprinted locus in the Peg10 gene, split the reads based on the average CpG methylation in the locus, and compare the levels of 6mA modifications between the groups.\nFirst, we read the CpG methylation data and filter positions to only retain those in a CpG context.\n\npeg10 &lt;- as(\"chr6:4746792-4748791\", \"GRanges\")\n\nseC &lt;- readModBam(\n    bamfiles = \"data/mESC_wt_5mCG_5hmCG_rep2.bam\", \n    regions = peg10,\n    modbase = \"m\", \n    sequenceReference = gnm,\n    sequenceContextWidth = 3,\n    seqinfo = seqinfo(gnm),\n    trim = TRUE,\n    BPPARAM = BiocParallel::SerialParam(),\n    verbose = interactive()\n)\nseC &lt;- filterPositions(\n    seC, \n    filters = \"sequenceContext\",\n    sequenceContext = \"NCG\"\n)\n\nNext, we calculate the average modification fraction per read. We note a clear bimodality of the distribution, and define two groups of reads based on this.\n\n# calculate average modification fraction per read\navgmod &lt;- colMeans(as.matrix(assay(seC, \"mod_prob\")), na.rm = TRUE)\n\nggplot(data.frame(avgmod = avgmod), aes(x = avgmod)) +\n    geom_histogram() +\n    labs(x = \"Average modification probability per read (CpG)\") + \n    theme_bw(base_size = 16)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nread_groups &lt;- split(colnames(as.matrix(assay(seC, \"mod_prob\"))), \n                     c(\"paternal\", \"maternal\")[(avgmod &gt; 0.5) + 1])\n\nNext, we read the 6mA data for the same sample, filter by sequence context and regroup the reads based on the split defined above.\n\nseA &lt;- readModBam(\n    bamfiles = \"data/mESC_wt_6mA_rep2.bam\", \n    regions = peg10,\n    modbase = \"a\", \n    sequenceReference = gnm,\n    sequenceContextWidth = 1,\n    seqinfo = seqinfo(gnm),\n    trim = TRUE,\n    BPPARAM = BiocParallel::SerialParam(),\n    verbose = interactive()\n)\nseA &lt;- filterPositions(\n    seA, \n    filters = \"sequenceContext\",\n    sequenceContext = \"A\"\n)\nseA &lt;- regroupReads(seA, readGroups = read_groups)\n# check that the columns of seA now correspond to read groups\ncolnames(seA)\n\n[1] \"maternal\" \"paternal\"\n\n\nWith the new read grouping, we next calculate summary statistics and visualize the 6mA data.\n\nseA &lt;- flattenReadLevelAssay(seA)\n\nplotRegion(seA, region = peg10, sequenceContext = \"A\", \n           tracks = list(list(trackType = \"Heatmap\", trackData = \"mod_prob\", \n                              interpolate = TRUE, legendTitle = \"6mA\", \n                              orderReads = \"squish\"),\n                         list(trackType = \"Smooth\", trackData = \"FracMod\"))) + \n    plot_layout(heights = c(3, 1))",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "grouping-reads.html#across-different-regions",
    "href": "grouping-reads.html#across-different-regions",
    "title": "7  Grouping reads",
    "section": "7.4 Across different regions",
    "text": "7.4 Across different regions\nexample of meta plot getAnchorRegions.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping reads</span>"
    ]
  },
  {
    "objectID": "multiple-modalities.html",
    "href": "multiple-modalities.html",
    "title": "8  Combining and comparing multiple data modalities",
    "section": "",
    "text": "8.1 Heterozygous CTCF sites (changes of motif score, ChIP and 6mA or 5mCpG)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Combining and comparing multiple data modalities</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Li, Heng, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils\nHomer, Gabor Marth, Goncalo Abecasis, Richard Durbin, and 1000 Genome\nProject Data Processing Subgroup. 2009. “The Sequence\nAlignment/Map Format and SAMtools.”\nBioinformatics 25 (16): 2078–79.\n\n\nValouev, Anton, Steven M. Johnson, Scott D. Boyd, Cheryl L. Smith,\nAndrew Z. Fire, and Arend Sidow. 2011. “Determinants of Nucleosome\nOrganization in Primary Human Cells.” Nature 474 (7352):\n516–20. https://doi.org/10.1038/nature10002.",
    "crumbs": [
      "References"
    ]
  }
]